
Caterina.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b8  00800100  00007f12  00000fa6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f12  00007000  00007000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  008001b8  008001b8  0000105e  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000105e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000280  00000000  00000000  0000106f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000047dc  00000000  00000000  000012ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000010ed  00000000  00000000  00005acb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001ed1  00000000  00000000  00006bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000080c  00000000  00000000  00008a8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001da5  00000000  00000000  00009298  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002eb5  00000000  00000000  0000b03d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000418  00000000  00000000  0000def2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007000 <__vectors>:
    7000:	70 c0       	rjmp	.+224    	; 0x70e2 <__ctors_end>
    7002:	00 00       	nop
    7004:	89 c0       	rjmp	.+274    	; 0x7118 <__bad_interrupt>
    7006:	00 00       	nop
    7008:	87 c0       	rjmp	.+270    	; 0x7118 <__bad_interrupt>
    700a:	00 00       	nop
    700c:	85 c0       	rjmp	.+266    	; 0x7118 <__bad_interrupt>
    700e:	00 00       	nop
    7010:	83 c0       	rjmp	.+262    	; 0x7118 <__bad_interrupt>
    7012:	00 00       	nop
    7014:	81 c0       	rjmp	.+258    	; 0x7118 <__bad_interrupt>
    7016:	00 00       	nop
    7018:	7f c0       	rjmp	.+254    	; 0x7118 <__bad_interrupt>
    701a:	00 00       	nop
    701c:	7d c0       	rjmp	.+250    	; 0x7118 <__bad_interrupt>
    701e:	00 00       	nop
    7020:	7b c0       	rjmp	.+246    	; 0x7118 <__bad_interrupt>
    7022:	00 00       	nop
    7024:	79 c0       	rjmp	.+242    	; 0x7118 <__bad_interrupt>
    7026:	00 00       	nop
    7028:	0a c5       	rjmp	.+2580   	; 0x7a3e <__vector_10>
    702a:	00 00       	nop
    702c:	75 c0       	rjmp	.+234    	; 0x7118 <__bad_interrupt>
    702e:	00 00       	nop
    7030:	73 c0       	rjmp	.+230    	; 0x7118 <__bad_interrupt>
    7032:	00 00       	nop
    7034:	71 c0       	rjmp	.+226    	; 0x7118 <__bad_interrupt>
    7036:	00 00       	nop
    7038:	6f c0       	rjmp	.+222    	; 0x7118 <__bad_interrupt>
    703a:	00 00       	nop
    703c:	6d c0       	rjmp	.+218    	; 0x7118 <__bad_interrupt>
    703e:	00 00       	nop
    7040:	6b c0       	rjmp	.+214    	; 0x7118 <__bad_interrupt>
    7042:	00 00       	nop
    7044:	3d c1       	rjmp	.+634    	; 0x72c0 <__vector_17>
    7046:	00 00       	nop
    7048:	67 c0       	rjmp	.+206    	; 0x7118 <__bad_interrupt>
    704a:	00 00       	nop
    704c:	65 c0       	rjmp	.+202    	; 0x7118 <__bad_interrupt>
    704e:	00 00       	nop
    7050:	63 c0       	rjmp	.+198    	; 0x7118 <__bad_interrupt>
    7052:	00 00       	nop
    7054:	61 c0       	rjmp	.+194    	; 0x7118 <__bad_interrupt>
    7056:	00 00       	nop
    7058:	5f c0       	rjmp	.+190    	; 0x7118 <__bad_interrupt>
    705a:	00 00       	nop
    705c:	5d c0       	rjmp	.+186    	; 0x7118 <__bad_interrupt>
    705e:	00 00       	nop
    7060:	5b c0       	rjmp	.+182    	; 0x7118 <__bad_interrupt>
    7062:	00 00       	nop
    7064:	59 c0       	rjmp	.+178    	; 0x7118 <__bad_interrupt>
    7066:	00 00       	nop
    7068:	57 c0       	rjmp	.+174    	; 0x7118 <__bad_interrupt>
    706a:	00 00       	nop
    706c:	55 c0       	rjmp	.+170    	; 0x7118 <__bad_interrupt>
    706e:	00 00       	nop
    7070:	53 c0       	rjmp	.+166    	; 0x7118 <__bad_interrupt>
    7072:	00 00       	nop
    7074:	51 c0       	rjmp	.+162    	; 0x7118 <__bad_interrupt>
    7076:	00 00       	nop
    7078:	4f c0       	rjmp	.+158    	; 0x7118 <__bad_interrupt>
    707a:	00 00       	nop
    707c:	4d c0       	rjmp	.+154    	; 0x7118 <__bad_interrupt>
    707e:	00 00       	nop
    7080:	4b c0       	rjmp	.+150    	; 0x7118 <__bad_interrupt>
    7082:	00 00       	nop
    7084:	49 c0       	rjmp	.+146    	; 0x7118 <__bad_interrupt>
    7086:	00 00       	nop
    7088:	47 c0       	rjmp	.+142    	; 0x7118 <__bad_interrupt>
    708a:	00 00       	nop
    708c:	45 c0       	rjmp	.+138    	; 0x7118 <__bad_interrupt>
    708e:	00 00       	nop
    7090:	43 c0       	rjmp	.+134    	; 0x7118 <__bad_interrupt>
    7092:	00 00       	nop
    7094:	41 c0       	rjmp	.+130    	; 0x7118 <__bad_interrupt>
    7096:	00 00       	nop
    7098:	3f c0       	rjmp	.+126    	; 0x7118 <__bad_interrupt>
    709a:	00 00       	nop
    709c:	3d c0       	rjmp	.+122    	; 0x7118 <__bad_interrupt>
    709e:	00 00       	nop
    70a0:	3b c0       	rjmp	.+118    	; 0x7118 <__bad_interrupt>
    70a2:	00 00       	nop
    70a4:	39 c0       	rjmp	.+114    	; 0x7118 <__bad_interrupt>
    70a6:	00 00       	nop
    70a8:	37 c0       	rjmp	.+110    	; 0x7118 <__bad_interrupt>
    70aa:	00 00       	nop

000070ac <__do_spm>:
 */

void __do_spm(uint16_t address, uint8_t command, uint16_t data) __attribute__ ((used, section (".vectors")));
void __do_spm(uint16_t address, uint8_t command, uint16_t data) {
    // Do spm stuff
    __asm__ volatile (
    70ac:	fc 01       	movw	r30, r24
    70ae:	0a 01       	movw	r0, r20
    70b0:	67 bf       	out	0x37, r22	; 55
    70b2:	e8 95       	spm
    70b4:	11 24       	eor	r1, r1
    );

    // wait for spm to complete
    //   it doesn't have much sense for __BOOT_PAGE_FILL,
    //   but it doesn't hurt and saves some bytes on 'if'
    boot_spm_busy_wait();
    70b6:	07 b6       	in	r0, 0x37	; 55
    70b8:	00 fc       	sbrc	r0, 0
    70ba:	fd cf       	rjmp	.-6      	; 0x70b6 <__do_spm+0xa>
#if defined(RWWSRE)
    // this 'if' condition should be: (command == __BOOT_PAGE_WRITE || command == __BOOT_PAGE_ERASE)...
    // but it's tweaked a little assuming that in every command we are interested in here, there
    // must be also SELFPRGEN set. If we skip checking this bit, we save here 4B
    if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
    70bc:	66 70       	andi	r22, 0x06	; 6
    70be:	31 f0       	breq	.+12     	; 0x70cc <__do_spm+0x20>
    70c0:	45 2b       	or	r20, r21
    70c2:	21 f4       	brne	.+8      	; 0x70cc <__do_spm+0x20>
      // Reenable read access to flash
      boot_rww_enable();
    70c4:	81 e1       	ldi	r24, 0x11	; 17
    70c6:	80 93 57 00 	sts	0x0057, r24
    70ca:	e8 95       	spm
    70cc:	08 95       	ret
    70ce:	87 3e       	cpi	r24, 0xE7	; 231
    70d0:	a0 3e       	cpi	r26, 0xE0	; 224
    70d2:	44 3f       	cpi	r20, 0xF4	; 244
    70d4:	a0 3e       	cpi	r26, 0xE0	; 224
    70d6:	44 3f       	cpi	r20, 0xF4	; 244
    70d8:	d5 3e       	cpi	r29, 0xE5	; 229
    70da:	f7 3e       	cpi	r31, 0xE7	; 231
    70dc:	44 3f       	cpi	r20, 0xF4	; 244
    70de:	17 3f       	cpi	r17, 0xF7	; 247
    70e0:	29 3f       	cpi	r18, 0xF9	; 249

000070e2 <__ctors_end>:
    70e2:	11 24       	eor	r1, r1
    70e4:	1f be       	out	0x3f, r1	; 63
    70e6:	cf ef       	ldi	r28, 0xFF	; 255
    70e8:	da e0       	ldi	r29, 0x0A	; 10
    70ea:	de bf       	out	0x3e, r29	; 62
    70ec:	cd bf       	out	0x3d, r28	; 61

000070ee <__do_copy_data>:
    70ee:	11 e0       	ldi	r17, 0x01	; 1
    70f0:	a0 e0       	ldi	r26, 0x00	; 0
    70f2:	b1 e0       	ldi	r27, 0x01	; 1
    70f4:	e2 e1       	ldi	r30, 0x12	; 18
    70f6:	ff e7       	ldi	r31, 0x7F	; 127
    70f8:	02 c0       	rjmp	.+4      	; 0x70fe <__do_copy_data+0x10>
    70fa:	05 90       	lpm	r0, Z+
    70fc:	0d 92       	st	X+, r0
    70fe:	a8 3b       	cpi	r26, 0xB8	; 184
    7100:	b1 07       	cpc	r27, r17
    7102:	d9 f7       	brne	.-10     	; 0x70fa <__do_copy_data+0xc>

00007104 <__do_clear_bss>:
    7104:	21 e0       	ldi	r18, 0x01	; 1
    7106:	a8 eb       	ldi	r26, 0xB8	; 184
    7108:	b1 e0       	ldi	r27, 0x01	; 1
    710a:	01 c0       	rjmp	.+2      	; 0x710e <.do_clear_bss_start>

0000710c <.do_clear_bss_loop>:
    710c:	1d 92       	st	X+, r1

0000710e <.do_clear_bss_start>:
    710e:	aa 3c       	cpi	r26, 0xCA	; 202
    7110:	b2 07       	cpc	r27, r18
    7112:	e1 f7       	brne	.-8      	; 0x710c <.do_clear_bss_loop>
    7114:	83 d3       	rcall	.+1798   	; 0x781c <main>
    7116:	fb c6       	rjmp	.+3574   	; 0x7f0e <_exit>

00007118 <__bad_interrupt>:
    7118:	73 cf       	rjmp	.-282    	; 0x7000 <__vectors>

0000711a <FetchNextCommandByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    711a:	84 e0       	ldi	r24, 0x04	; 4
    711c:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    7120:	80 91 e8 00 	lds	r24, 0x00E8
{
	/* Select the OUT endpoint so that the next data byte can be read */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
    7124:	85 fd       	sbrc	r24, 5
    7126:	0e c0       	rjmp	.+28     	; 0x7144 <FetchNextCommandByte+0x2a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7128:	80 91 e8 00 	lds	r24, 0x00E8
    712c:	8b 77       	andi	r24, 0x7B	; 123
    712e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7132:	80 91 e8 00 	lds	r24, 0x00E8
	{
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
    7136:	82 fd       	sbrc	r24, 2
    7138:	f3 cf       	rjmp	.-26     	; 0x7120 <FetchNextCommandByte+0x6>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    713a:	8e b3       	in	r24, 0x1e	; 30
    713c:	81 11       	cpse	r24, r1
    713e:	f9 cf       	rjmp	.-14     	; 0x7132 <FetchNextCommandByte+0x18>
			  return 0;
    7140:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	/* Fetch the next byte from the OUT endpoint */
	return Endpoint_Read_8();
}
    7142:	08 95       	ret
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    7144:	80 91 f1 00 	lds	r24, 0x00F1
			  return 0;
		}
	}

	/* Fetch the next byte from the OUT endpoint */
	return Endpoint_Read_8();
    7148:	08 95       	ret

0000714a <WriteNextResponseByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    714a:	93 e0       	ldi	r25, 0x03	; 3
    714c:	90 93 e9 00 	sts	0x00E9, r25
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    7150:	90 91 e8 00 	lds	r25, 0x00E8
{
	/* Select the IN endpoint so that the next data byte can be written */
	Endpoint_SelectEndpoint(CDC_TX_EPNUM);

	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
    7154:	95 ff       	sbrs	r25, 5
    7156:	03 c0       	rjmp	.+6      	; 0x715e <WriteNextResponseByte+0x14>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7158:	80 93 f1 00 	sts	0x00F1, r24
    715c:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    715e:	90 91 e8 00 	lds	r25, 0x00E8
    7162:	9e 77       	andi	r25, 0x7E	; 126
    7164:	90 93 e8 00 	sts	0x00E8, r25
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7168:	90 91 e8 00 	lds	r25, 0x00E8
	{
		Endpoint_ClearIN();

		while (!(Endpoint_IsINReady()))
    716c:	90 fd       	sbrc	r25, 0
    716e:	f4 cf       	rjmp	.-24     	; 0x7158 <WriteNextResponseByte+0xe>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    7170:	9e b3       	in	r25, 0x1e	; 30
    7172:	91 11       	cpse	r25, r1
    7174:	f9 cf       	rjmp	.-14     	; 0x7168 <WriteNextResponseByte+0x1e>
    7176:	08 95       	ret

00007178 <StartSketch>:
uint16_t bootKey = 0x7777;
volatile uint16_t *const bootKeyPtr = (volatile uint16_t *)0x0800;

void StartSketch(void)
{
	cli();
    7178:	f8 94       	cli
	
	/* Undo TIMER1 setup and clear the count before running the sketch */
	TIMSK1 = 0;
    717a:	10 92 6f 00 	sts	0x006F, r1
	TCCR1B = 0;
    717e:	10 92 81 00 	sts	0x0081, r1
	TCNT1H = 0;		// 16-bit write to TCNT1 requires high byte be written first
    7182:	10 92 85 00 	sts	0x0085, r1
	TCNT1L = 0;
    7186:	10 92 84 00 	sts	0x0084, r1
	
	/* Relocate the interrupt vector table to the application section */
	MCUCR = (1 << IVCE);
    718a:	81 e0       	ldi	r24, 0x01	; 1
    718c:	85 bf       	out	0x35, r24	; 53
	MCUCR = 0;
    718e:	15 be       	out	0x35, r1	; 53

	L_LED_OFF();
    7190:	47 98       	cbi	0x08, 7	; 8
	
	/* jump to beginning of application space */
	__asm__ volatile("jmp 0x0000");
    7192:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>
    7196:	08 95       	ret

00007198 <LEDPulse>:

/*	Breathing animation on L LED indicates bootloader is running */
uint16_t LLEDPulse;
void LEDPulse(void)
{
	LLEDPulse++;
    7198:	80 91 be 01 	lds	r24, 0x01BE
    719c:	90 91 bf 01 	lds	r25, 0x01BF
    71a0:	01 96       	adiw	r24, 0x01	; 1
    71a2:	90 93 bf 01 	sts	0x01BF, r25
    71a6:	80 93 be 01 	sts	0x01BE, r24
	uint8_t p = LLEDPulse >> 8;
    71aa:	29 2f       	mov	r18, r25
	if (p > 127)
    71ac:	97 ff       	sbrs	r25, 7
    71ae:	02 c0       	rjmp	.+4      	; 0x71b4 <LEDPulse+0x1c>
		p = 254-p;
    71b0:	2e ef       	ldi	r18, 0xFE	; 254
    71b2:	29 1b       	sub	r18, r25
	p += p;
    71b4:	22 0f       	add	r18, r18
	if (((uint8_t)LLEDPulse) > p)
    71b6:	28 17       	cp	r18, r24
    71b8:	10 f4       	brcc	.+4      	; 0x71be <LEDPulse+0x26>
		L_LED_OFF();
    71ba:	47 98       	cbi	0x08, 7	; 8
    71bc:	08 95       	ret
	else
		L_LED_ON();
    71be:	47 9a       	sbi	0x08, 7	; 8
    71c0:	08 95       	ret

000071c2 <copyflashIfValid>:
#define SIZE_OF_NEW_FLASH_HEADER 2
/**
 * returns 0 sucessfull copy of new flash
 * 			1 illegal size of new flash
 */
int copyflashIfValid(void) {
    71c2:	0f 93       	push	r16
    71c4:	1f 93       	push	r17
    71c6:	cf 93       	push	r28
    71c8:	df 93       	push	r29
	uint16_t i,page;
	uint16_t imagesize=0x7FFF;

	//read image size if size is not valid (ignore it)
	imagesize=pgm_read_word(NEW_FLASH_OFFSET);
    71ca:	e0 e0       	ldi	r30, 0x00	; 0
    71cc:	f8 e3       	ldi	r31, 0x38	; 56
    71ce:	45 91       	lpm	r20, Z+
    71d0:	54 91       	lpm	r21, Z
	Dputch('F');
	if (imagesize>=NEW_FLASH_OFFSET || imagesize == 0) {
    71d2:	ca 01       	movw	r24, r20
    71d4:	01 97       	sbiw	r24, 0x01	; 1
    71d6:	8f 3f       	cpi	r24, 0xFF	; 255
    71d8:	97 43       	sbci	r25, 0x37	; 55
    71da:	08 f0       	brcs	.+2      	; 0x71de <copyflashIfValid+0x1c>
    71dc:	40 c0       	rjmp	.+128    	; 0x725e <copyflashIfValid+0x9c>
    71de:	20 e0       	ldi	r18, 0x00	; 0
    71e0:	30 e0       	ldi	r19, 0x00	; 0
		Dputch('*');
		for (; i<page+SPM_PAGESIZE; i+=2)
		{
			// Set up little-endian word.
			uint16_t w = pgm_read_word(i + NEW_FLASH_OFFSET+SIZE_OF_NEW_FLASH_HEADER);
			boot_page_fill (i, w);
    71e2:	c1 e0       	ldi	r28, 0x01	; 1
		}
		boot_page_erase(page);
    71e4:	d3 e0       	ldi	r29, 0x03	; 3
		boot_spm_busy_wait();
		boot_page_write (page); // Store buffer in flash page.
    71e6:	15 e0       	ldi	r17, 0x05	; 5
		boot_spm_busy_wait();
#if defined(RWWSRE)
		// Reenable read access to flash
		boot_rww_enable();
    71e8:	01 e1       	ldi	r16, 0x11	; 17
#define SIZE_OF_NEW_FLASH_HEADER 2
/**
 * returns 0 sucessfull copy of new flash
 * 			1 illegal size of new flash
 */
int copyflashIfValid(void) {
    71ea:	c9 01       	movw	r24, r18

	Dputch('2');
	for(i=0;i<imagesize;) {
		page=i;
		Dputch('*');
		for (; i<page+SPM_PAGESIZE; i+=2)
    71ec:	b9 01       	movw	r22, r18
    71ee:	60 58       	subi	r22, 0x80	; 128
    71f0:	7f 4f       	sbci	r23, 0xFF	; 255
    71f2:	86 17       	cp	r24, r22
    71f4:	97 07       	cpc	r25, r23
    71f6:	68 f4       	brcc	.+26     	; 0x7212 <copyflashIfValid+0x50>
		{
			// Set up little-endian word.
			uint16_t w = pgm_read_word(i + NEW_FLASH_OFFSET+SIZE_OF_NEW_FLASH_HEADER);
    71f8:	fc 01       	movw	r30, r24
    71fa:	ee 5f       	subi	r30, 0xFE	; 254
    71fc:	f7 4c       	sbci	r31, 0xC7	; 199
    71fe:	a5 91       	lpm	r26, Z+
    7200:	b4 91       	lpm	r27, Z
			boot_page_fill (i, w);
    7202:	fc 01       	movw	r30, r24
    7204:	0d 01       	movw	r0, r26
    7206:	c0 93 57 00 	sts	0x0057, r28
    720a:	e8 95       	spm
    720c:	11 24       	eor	r1, r1

	Dputch('2');
	for(i=0;i<imagesize;) {
		page=i;
		Dputch('*');
		for (; i<page+SPM_PAGESIZE; i+=2)
    720e:	02 96       	adiw	r24, 0x02	; 2
    7210:	f0 cf       	rjmp	.-32     	; 0x71f2 <copyflashIfValid+0x30>
		{
			// Set up little-endian word.
			uint16_t w = pgm_read_word(i + NEW_FLASH_OFFSET+SIZE_OF_NEW_FLASH_HEADER);
			boot_page_fill (i, w);
		}
		boot_page_erase(page);
    7212:	f9 01       	movw	r30, r18
    7214:	d0 93 57 00 	sts	0x0057, r29
    7218:	e8 95       	spm
		boot_spm_busy_wait();
    721a:	07 b6       	in	r0, 0x37	; 55
    721c:	00 fc       	sbrc	r0, 0
    721e:	fd cf       	rjmp	.-6      	; 0x721a <copyflashIfValid+0x58>
		boot_page_write (page); // Store buffer in flash page.
    7220:	f9 01       	movw	r30, r18
    7222:	10 93 57 00 	sts	0x0057, r17
    7226:	e8 95       	spm
		boot_spm_busy_wait();
    7228:	07 b6       	in	r0, 0x37	; 55
    722a:	00 fc       	sbrc	r0, 0
    722c:	fd cf       	rjmp	.-6      	; 0x7228 <copyflashIfValid+0x66>
#if defined(RWWSRE)
		// Reenable read access to flash
		boot_rww_enable();
    722e:	00 93 57 00 	sts	0x0057, r16
    7232:	e8 95       	spm
		Dputch('1');
		return 1;
	}

	Dputch('2');
	for(i=0;i<imagesize;) {
    7234:	84 17       	cp	r24, r20
    7236:	95 07       	cpc	r25, r21
    7238:	10 f4       	brcc	.+4      	; 0x723e <copyflashIfValid+0x7c>
    723a:	9c 01       	movw	r18, r24
    723c:	d6 cf       	rjmp	.-84     	; 0x71ea <copyflashIfValid+0x28>

	/*
	 * erase first page as sign of program flashed
	 */
	Dputch('3');
	boot_page_erase(NEW_FLASH_OFFSET);
    723e:	e0 e0       	ldi	r30, 0x00	; 0
    7240:	f8 e3       	ldi	r31, 0x38	; 56
    7242:	83 e0       	ldi	r24, 0x03	; 3
    7244:	80 93 57 00 	sts	0x0057, r24
    7248:	e8 95       	spm
	boot_spm_busy_wait();
    724a:	07 b6       	in	r0, 0x37	; 55
    724c:	00 fc       	sbrc	r0, 0
    724e:	fd cf       	rjmp	.-6      	; 0x724a <copyflashIfValid+0x88>
#define WATCHDOG_4S     (_BV(WDP3) | _BV(WDE))
#define WATCHDOG_8S     (_BV(WDP3) | _BV(WDP0) | _BV(WDE))
#endif

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7250:	88 e1       	ldi	r24, 0x18	; 24
    7252:	80 93 60 00 	sts	0x0060, r24
  WDTCSR = x;
    7256:	88 e0       	ldi	r24, 0x08	; 8
    7258:	80 93 60 00 	sts	0x0060, r24
    725c:	ff cf       	rjmp	.-2      	; 0x725c <copyflashIfValid+0x9a>
	boot_spm_busy_wait();
//    TIMSK1 = (1 << OCIE1A);
    //now trigger a watchdog reset
    watchdogConfig(WATCHDOG_16MS);  // short WDT timeout
	while (1) {Dputch('-');}; 		                  // and busy-loop so that WD causes a reset and app start
}
    725e:	81 e0       	ldi	r24, 0x01	; 1
    7260:	90 e0       	ldi	r25, 0x00	; 0
    7262:	df 91       	pop	r29
    7264:	cf 91       	pop	r28
    7266:	1f 91       	pop	r17
    7268:	0f 91       	pop	r16
    726a:	08 95       	ret

0000726c <SetupHardware>:

/** Configures all hardware required for the bootloader. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
    726c:	84 b7       	in	r24, 0x34	; 52
    726e:	87 7f       	andi	r24, 0xF7	; 247
    7270:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
    7272:	88 e1       	ldi	r24, 0x18	; 24
    7274:	0f b6       	in	r0, 0x3f	; 63
    7276:	f8 94       	cli
    7278:	80 93 60 00 	sts	0x0060, r24
    727c:	10 92 60 00 	sts	0x0060, r1
    7280:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    7282:	90 e0       	ldi	r25, 0x00	; 0
    7284:	80 e8       	ldi	r24, 0x80	; 128
    7286:	0f b6       	in	r0, 0x3f	; 63
    7288:	f8 94       	cli
    728a:	80 93 61 00 	sts	0x0061, r24
    728e:	90 93 61 00 	sts	0x0061, r25
    7292:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
    7294:	81 e0       	ldi	r24, 0x01	; 1
    7296:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1 << IVSEL);
    7298:	82 e0       	ldi	r24, 0x02	; 2
    729a:	85 bf       	out	0x35, r24	; 53
	
	LED_SETUP();
    729c:	3f 9a       	sbi	0x07, 7	; 7
	CPU_PRESCALE(0); 
    729e:	e1 e6       	ldi	r30, 0x61	; 97
    72a0:	f0 e0       	ldi	r31, 0x00	; 0
    72a2:	90 e8       	ldi	r25, 0x80	; 128
    72a4:	90 83       	st	Z, r25
    72a6:	10 82       	st	Z, r1
	L_LED_OFF();
    72a8:	47 98       	cbi	0x08, 7	; 8
	 * With 16 MHz clock and 1/64 prescaler, timer 1 is clocked at 250 kHz
	 * Our chosen compare match generates an interrupt every 1 ms.
	 * This interrupt is disabled selectively when doing memory reading, erasing,
	 * or writing since SPM has tight timing requirements.
	 */ 
	OCR1AH = 0;
    72aa:	10 92 89 00 	sts	0x0089, r1
	OCR1AL = 250;
    72ae:	9a ef       	ldi	r25, 0xFA	; 250
    72b0:	90 93 88 00 	sts	0x0088, r25
	TIMSK1 = (1 << OCIE1A);					// enable timer 1 output compare A match interrupt
    72b4:	80 93 6f 00 	sts	0x006F, r24
	TCCR1B = ((1 << CS11) | (1 << CS10));	// 1/64 prescaler on timer 1 input
    72b8:	83 e0       	ldi	r24, 0x03	; 3
    72ba:	80 93 81 00 	sts	0x0081, r24

	/* Initialize USB Subsystem */
	USB_Init();
    72be:	a7 c3       	rjmp	.+1870   	; 0x7a0e <USB_Init>

000072c0 <__vector_17>:
    72c0:	1f 92       	push	r1
}

//uint16_t ctr = 0;
ISR(TIMER1_COMPA_vect, ISR_BLOCK)
{
    72c2:	0f 92       	push	r0
    72c4:	0f b6       	in	r0, 0x3f	; 63
    72c6:	0f 92       	push	r0
    72c8:	11 24       	eor	r1, r1
    72ca:	2f 93       	push	r18
    72cc:	8f 93       	push	r24
    72ce:	9f 93       	push	r25
    72d0:	ef 93       	push	r30
    72d2:	ff 93       	push	r31
	/* Reset counter */
	TCNT1H = 0;
    72d4:	10 92 85 00 	sts	0x0085, r1
	TCNT1L = 0;
    72d8:	10 92 84 00 	sts	0x0084, r1
	
	if (pgm_read_word(0) != 0xFFFF)
    72dc:	e0 e0       	ldi	r30, 0x00	; 0
    72de:	f0 e0       	ldi	r31, 0x00	; 0
    72e0:	85 91       	lpm	r24, Z+
    72e2:	94 91       	lpm	r25, Z
    72e4:	01 96       	adiw	r24, 0x01	; 1
    72e6:	49 f0       	breq	.+18     	; 0x72fa <__vector_17+0x3a>
		Timeout++;
    72e8:	80 91 b8 01 	lds	r24, 0x01B8
    72ec:	90 91 b9 01 	lds	r25, 0x01B9
    72f0:	01 96       	adiw	r24, 0x01	; 1
    72f2:	90 93 b9 01 	sts	0x01B9, r25
    72f6:	80 93 b8 01 	sts	0x01B8, r24
}
    72fa:	ff 91       	pop	r31
    72fc:	ef 91       	pop	r30
    72fe:	9f 91       	pop	r25
    7300:	8f 91       	pop	r24
    7302:	2f 91       	pop	r18
    7304:	0f 90       	pop	r0
    7306:	0f be       	out	0x3f, r0	; 63
    7308:	0f 90       	pop	r0
    730a:	1f 90       	pop	r1
    730c:	18 95       	reti

0000730e <EVENT_USB_Device_ConfigurationChanged>:
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    730e:	42 e0       	ldi	r20, 0x02	; 2
    7310:	61 ec       	ldi	r22, 0xC1	; 193
    7312:	82 e0       	ldi	r24, 0x02	; 2
    7314:	0f d3       	rcall	.+1566   	; 0x7934 <Endpoint_ConfigureEndpoint_Prv>
    7316:	42 e1       	ldi	r20, 0x12	; 18
    7318:	61 e8       	ldi	r22, 0x81	; 129
    731a:	83 e0       	ldi	r24, 0x03	; 3
    731c:	0b d3       	rcall	.+1558   	; 0x7934 <Endpoint_ConfigureEndpoint_Prv>
    731e:	42 e1       	ldi	r20, 0x12	; 18
    7320:	60 e8       	ldi	r22, 0x80	; 128
    7322:	84 e0       	ldi	r24, 0x04	; 4
    7324:	07 c3       	rjmp	.+1550   	; 0x7934 <Endpoint_ConfigureEndpoint_Prv>

00007326 <EVENT_USB_Device_ControlRequest>:
    7326:	80 91 c2 01 	lds	r24, 0x01C2
    732a:	98 2f       	mov	r25, r24
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	/* Ignore any requests that aren't directed to the CDC interface */
	if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
    732c:	9f 77       	andi	r25, 0x7F	; 127
    732e:	91 32       	cpi	r25, 0x21	; 33
    7330:	39 f5       	brne	.+78     	; 0x7380 <EVENT_USB_Device_ControlRequest+0x5a>
	{
		return;
	}

	/* Process CDC specific control requests */
	switch (USB_ControlRequest.bRequest)
    7332:	90 91 c3 01 	lds	r25, 0x01C3
    7336:	90 32       	cpi	r25, 0x20	; 32
    7338:	91 f0       	breq	.+36     	; 0x735e <EVENT_USB_Device_ControlRequest+0x38>
    733a:	91 32       	cpi	r25, 0x21	; 33
    733c:	09 f5       	brne	.+66     	; 0x7380 <EVENT_USB_Device_ControlRequest+0x5a>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    733e:	81 3a       	cpi	r24, 0xA1	; 161
    7340:	f9 f4       	brne	.+62     	; 0x7380 <EVENT_USB_Device_ControlRequest+0x5a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7342:	80 91 e8 00 	lds	r24, 0x00E8
    7346:	87 7f       	andi	r24, 0xF7	; 247
    7348:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				/* Write the line coding data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
    734c:	67 e0       	ldi	r22, 0x07	; 7
    734e:	70 e0       	ldi	r23, 0x00	; 0
    7350:	83 e0       	ldi	r24, 0x03	; 3
    7352:	91 e0       	ldi	r25, 0x01	; 1
    7354:	22 d4       	rcall	.+2116   	; 0x7b9a <Endpoint_Write_Control_Stream_LE>
    7356:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    735a:	8b 77       	andi	r24, 0x7B	; 123
    735c:	0f c0       	rjmp	.+30     	; 0x737c <EVENT_USB_Device_ControlRequest+0x56>
    735e:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    7360:	79 f4       	brne	.+30     	; 0x7380 <EVENT_USB_Device_ControlRequest+0x5a>
    7362:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7366:	87 7f       	andi	r24, 0xF7	; 247
    7368:	80 93 e8 00 	sts	0x00E8, r24
    736c:	67 e0       	ldi	r22, 0x07	; 7
			{
				Endpoint_ClearSETUP();

				/* Read the line coding data in from the host into the global struct */
				Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
    736e:	70 e0       	ldi	r23, 0x00	; 0
    7370:	83 e0       	ldi	r24, 0x03	; 3
    7372:	91 e0       	ldi	r25, 0x01	; 1
    7374:	6b d4       	rcall	.+2262   	; 0x7c4c <Endpoint_Read_Control_Stream_LE>
    7376:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    737a:	8e 77       	andi	r24, 0x7E	; 126
    737c:	80 93 e8 00 	sts	0x00E8, r24
    7380:	08 95       	ret

00007382 <CDC_Task>:
    7382:	4f 92       	push	r4
    7384:	5f 92       	push	r5

/** Task to read in AVR910 commands from the CDC data OUT endpoint, process them, perform the required actions
 *  and send the appropriate response back to the host.
 */
void CDC_Task(void)
{
    7386:	6f 92       	push	r6
    7388:	7f 92       	push	r7
    738a:	8f 92       	push	r8
    738c:	9f 92       	push	r9
    738e:	af 92       	push	r10
    7390:	bf 92       	push	r11
    7392:	cf 92       	push	r12
    7394:	df 92       	push	r13
    7396:	ef 92       	push	r14
    7398:	ff 92       	push	r15
    739a:	cf 93       	push	r28
    739c:	df 93       	push	r29
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    739e:	84 e0       	ldi	r24, 0x04	; 4
    73a0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    73a4:	80 91 e8 00 	lds	r24, 0x00E8
	/* Select the OUT endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* Check if endpoint has a command in it sent from the host */
	if (!(Endpoint_IsOUTReceived()))
    73a8:	82 ff       	sbrs	r24, 2
    73aa:	29 c2       	rjmp	.+1106   	; 0x77fe <CDC_Task+0x47c>
	  return;
	  

	/* Read in the bootloader command (first byte sent from host) */
	uint8_t Command = FetchNextCommandByte();
    73ac:	b6 de       	rcall	.-660    	; 0x711a <FetchNextCommandByte>
    73ae:	d8 2f       	mov	r29, r24
    73b0:	85 34       	cpi	r24, 0x45	; 69

	if (Command == 'E')
    73b2:	81 f4       	brne	.+32     	; 0x73d4 <CDC_Task+0x52>
    73b4:	8c ea       	ldi	r24, 0xAC	; 172
	{
		/* We nearly run out the bootloader timeout clock, 
		* leaving just a few hundred milliseconds so the 
		* bootloder has time to respond and service any 
		* subsequent requests */
		Timeout = TIMEOUT_PERIOD - 500;
    73b6:	9d e0       	ldi	r25, 0x0D	; 13
    73b8:	90 93 b9 01 	sts	0x01B9, r25
    73bc:	80 93 b8 01 	sts	0x01B8, r24
    73c0:	07 b6       	in	r0, 0x37	; 55
	
		/* Re-enable RWW section - must be done here in case 
		 * user has disabled verification on upload.  */
		boot_rww_enable_safe();		
    73c2:	00 fc       	sbrc	r0, 0
    73c4:	fd cf       	rjmp	.-6      	; 0x73c0 <CDC_Task+0x3e>
    73c6:	f9 99       	sbic	0x1f, 1	; 31
    73c8:	fe cf       	rjmp	.-4      	; 0x73c6 <CDC_Task+0x44>
    73ca:	81 e1       	ldi	r24, 0x11	; 17
    73cc:	80 93 57 00 	sts	0x0057, r24
    73d0:	e8 95       	spm
    73d2:	03 c0       	rjmp	.+6      	; 0x73da <CDC_Task+0x58>
    73d4:	84 35       	cpi	r24, 0x54	; 84

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 'T')
    73d6:	21 f4       	brne	.+8      	; 0x73e0 <CDC_Task+0x5e>
    73d8:	a0 de       	rcall	.-704    	; 0x711a <FetchNextCommandByte>
	{
		FetchNextCommandByte();
    73da:	8d e0       	ldi	r24, 0x0D	; 13
    73dc:	b6 de       	rcall	.-660    	; 0x714a <WriteNextResponseByte>

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
    73de:	e6 c1       	rjmp	.+972    	; 0x77ac <CDC_Task+0x42a>
    73e0:	8c 34       	cpi	r24, 0x4C	; 76
    73e2:	d9 f3       	breq	.-10     	; 0x73da <CDC_Task+0x58>
    73e4:	80 35       	cpi	r24, 0x50	; 80
	}
	else if ((Command == 'L') || (Command == 'P'))
    73e6:	c9 f3       	breq	.-14     	; 0x73da <CDC_Task+0x58>
    73e8:	84 37       	cpi	r24, 0x74	; 116
    73ea:	21 f4       	brne	.+8      	; 0x73f4 <CDC_Task+0x72>
    73ec:	84 e4       	ldi	r24, 0x44	; 68
	{
		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 't')
    73ee:	ad de       	rcall	.-678    	; 0x714a <WriteNextResponseByte>
    73f0:	80 e0       	ldi	r24, 0x00	; 0
	{
		// Return ATMEGA128 part code - this is only to allow AVRProg to use the bootloader 
		WriteNextResponseByte(0x44);
    73f2:	f4 cf       	rjmp	.-24     	; 0x73dc <CDC_Task+0x5a>
    73f4:	81 36       	cpi	r24, 0x61	; 97
    73f6:	11 f4       	brne	.+4      	; 0x73fc <CDC_Task+0x7a>
		WriteNextResponseByte(0x00);
    73f8:	89 e5       	ldi	r24, 0x59	; 89
    73fa:	f0 cf       	rjmp	.-32     	; 0x73dc <CDC_Task+0x5a>
	}
	else if (Command == 'a')
    73fc:	81 34       	cpi	r24, 0x41	; 65
    73fe:	91 f4       	brne	.+36     	; 0x7424 <CDC_Task+0xa2>
	{
		// Indicate auto-address increment is supported 
		WriteNextResponseByte('Y');
    7400:	8c de       	rcall	.-744    	; 0x711a <FetchNextCommandByte>
    7402:	c8 2f       	mov	r28, r24
	}
	else if (Command == 'A')
    7404:	8a de       	rcall	.-748    	; 0x711a <FetchNextCommandByte>
    7406:	90 e0       	ldi	r25, 0x00	; 0
	{
		// Set the current address to that given by the host 
		CurrAddress   = (FetchNextCommandByte() << 9);
    7408:	88 0f       	add	r24, r24
    740a:	99 1f       	adc	r25, r25
    740c:	2c 2f       	mov	r18, r28
		CurrAddress  |= (FetchNextCommandByte() << 1);
    740e:	30 e0       	ldi	r19, 0x00	; 0
    7410:	32 2f       	mov	r19, r18
    7412:	22 27       	eor	r18, r18
    7414:	33 0f       	add	r19, r19
    7416:	82 2b       	or	r24, r18
		WriteNextResponseByte('Y');
	}
	else if (Command == 'A')
	{
		// Set the current address to that given by the host 
		CurrAddress   = (FetchNextCommandByte() << 9);
    7418:	93 2b       	or	r25, r19
    741a:	aa 27       	eor	r26, r26
    741c:	97 fd       	sbrc	r25, 7
    741e:	a0 95       	com	r26
    7420:	ba 2f       	mov	r27, r26
		CurrAddress  |= (FetchNextCommandByte() << 1);
    7422:	98 c1       	rjmp	.+816    	; 0x7754 <CDC_Task+0x3d2>
    7424:	80 37       	cpi	r24, 0x70	; 112
    7426:	11 f4       	brne	.+4      	; 0x742c <CDC_Task+0xaa>
    7428:	83 e5       	ldi	r24, 0x53	; 83
    742a:	d8 cf       	rjmp	.-80     	; 0x73dc <CDC_Task+0x5a>
    742c:	83 35       	cpi	r24, 0x53	; 83
    742e:	49 f4       	brne	.+18     	; 0x7442 <CDC_Task+0xc0>

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 'p')
    7430:	ce ea       	ldi	r28, 0xAE	; 174
    7432:	d1 e0       	ldi	r29, 0x01	; 1
	{
		// Indicate serial programmer back to the host 
		WriteNextResponseByte('S');
    7434:	89 91       	ld	r24, Y+
    7436:	89 de       	rcall	.-750    	; 0x714a <WriteNextResponseByte>
	}
	else if (Command == 'S')
    7438:	21 e0       	ldi	r18, 0x01	; 1
    743a:	c5 3b       	cpi	r28, 0xB5	; 181
    743c:	d2 07       	cpc	r29, r18
    743e:	d1 f7       	brne	.-12     	; 0x7434 <CDC_Task+0xb2>
	{
		// Write the 7-byte software identifier to the endpoint 
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
    7440:	b5 c1       	rjmp	.+874    	; 0x77ac <CDC_Task+0x42a>
    7442:	86 35       	cpi	r24, 0x56	; 86
    7444:	21 f4       	brne	.+8      	; 0x744e <CDC_Task+0xcc>
		WriteNextResponseByte('S');
	}
	else if (Command == 'S')
	{
		// Write the 7-byte software identifier to the endpoint 
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
    7446:	81 e3       	ldi	r24, 0x31	; 49
    7448:	80 de       	rcall	.-768    	; 0x714a <WriteNextResponseByte>
    744a:	80 e3       	ldi	r24, 0x30	; 48
    744c:	c7 cf       	rjmp	.-114    	; 0x73dc <CDC_Task+0x5a>
    744e:	83 37       	cpi	r24, 0x73	; 115
		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
	}
	else if (Command == 'V')
    7450:	31 f4       	brne	.+12     	; 0x745e <CDC_Task+0xdc>
    7452:	87 e8       	ldi	r24, 0x87	; 135
	{
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MAJOR);
    7454:	7a de       	rcall	.-780    	; 0x714a <WriteNextResponseByte>
    7456:	85 e9       	ldi	r24, 0x95	; 149
    7458:	78 de       	rcall	.-784    	; 0x714a <WriteNextResponseByte>
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MINOR);
    745a:	8e e1       	ldi	r24, 0x1E	; 30
    745c:	bf cf       	rjmp	.-130    	; 0x73dc <CDC_Task+0x5a>
	}
	else if (Command == 's')
    745e:	85 36       	cpi	r24, 0x65	; 101
    7460:	b9 f4       	brne	.+46     	; 0x7490 <CDC_Task+0x10e>
	{
		WriteNextResponseByte(AVR_SIGNATURE_3);
    7462:	e0 e0       	ldi	r30, 0x00	; 0
    7464:	f0 e0       	ldi	r31, 0x00	; 0
    7466:	83 e0       	ldi	r24, 0x03	; 3
		WriteNextResponseByte(AVR_SIGNATURE_2);
    7468:	95 e0       	ldi	r25, 0x05	; 5
    746a:	80 93 57 00 	sts	0x0057, r24
		WriteNextResponseByte(AVR_SIGNATURE_1);
    746e:	e8 95       	spm
    7470:	07 b6       	in	r0, 0x37	; 55
	}
	else if (Command == 'e')
    7472:	00 fc       	sbrc	r0, 0
    7474:	fd cf       	rjmp	.-6      	; 0x7470 <CDC_Task+0xee>
    7476:	90 93 57 00 	sts	0x0057, r25
	{
		// Clear the application section of flash 
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
		{
			boot_page_erase(CurrFlashAddress);
    747a:	e8 95       	spm
			boot_spm_busy_wait();
			boot_page_write(CurrFlashAddress);
    747c:	07 b6       	in	r0, 0x37	; 55
	else if (Command == 'e')
	{
		// Clear the application section of flash 
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
		{
			boot_page_erase(CurrFlashAddress);
    747e:	00 fc       	sbrc	r0, 0
    7480:	fd cf       	rjmp	.-6      	; 0x747c <CDC_Task+0xfa>
    7482:	e0 58       	subi	r30, 0x80	; 128
			boot_spm_busy_wait();
    7484:	ff 4f       	sbci	r31, 0xFF	; 255
    7486:	e1 15       	cp	r30, r1
    7488:	20 e7       	ldi	r18, 0x70	; 112
			boot_page_write(CurrFlashAddress);
    748a:	f2 07       	cpc	r31, r18
    748c:	71 f7       	brne	.-36     	; 0x746a <CDC_Task+0xe8>
    748e:	a5 cf       	rjmp	.-182    	; 0x73da <CDC_Task+0x58>
			boot_spm_busy_wait();
    7490:	82 37       	cpi	r24, 0x72	; 114
    7492:	19 f4       	brne	.+6      	; 0x749a <CDC_Task+0x118>
    7494:	e1 e0       	ldi	r30, 0x01	; 1
    7496:	f0 e0       	ldi	r31, 0x00	; 0
    7498:	0e c0       	rjmp	.+28     	; 0x74b6 <CDC_Task+0x134>
		WriteNextResponseByte(AVR_SIGNATURE_1);
	}
	else if (Command == 'e')
	{
		// Clear the application section of flash 
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
    749a:	86 34       	cpi	r24, 0x46	; 70
    749c:	19 f4       	brne	.+6      	; 0x74a4 <CDC_Task+0x122>
    749e:	e0 e0       	ldi	r30, 0x00	; 0
    74a0:	f0 e0       	ldi	r31, 0x00	; 0
    74a2:	09 c0       	rjmp	.+18     	; 0x74b6 <CDC_Task+0x134>

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	#endif
	else if (Command == 'r')
    74a4:	8e 34       	cpi	r24, 0x4E	; 78
    74a6:	19 f4       	brne	.+6      	; 0x74ae <CDC_Task+0x12c>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
    74a8:	e3 e0       	ldi	r30, 0x03	; 3
    74aa:	f0 e0       	ldi	r31, 0x00	; 0
    74ac:	04 c0       	rjmp	.+8      	; 0x74b6 <CDC_Task+0x134>
	}
	else if (Command == 'F')
    74ae:	81 35       	cpi	r24, 0x51	; 81
    74b0:	39 f4       	brne	.+14     	; 0x74c0 <CDC_Task+0x13e>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS));
    74b2:	e2 e0       	ldi	r30, 0x02	; 2
    74b4:	f0 e0       	ldi	r31, 0x00	; 0
    74b6:	89 e0       	ldi	r24, 0x09	; 9
	}
	else if (Command == 'N')
    74b8:	80 93 57 00 	sts	0x0057, r24
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
    74bc:	84 91       	lpm	r24, Z
    74be:	8e cf       	rjmp	.-228    	; 0x73dc <CDC_Task+0x5a>
    74c0:	82 36       	cpi	r24, 0x62	; 98
	}
	else if (Command == 'Q')
    74c2:	31 f4       	brne	.+12     	; 0x74d0 <CDC_Task+0x14e>
    74c4:	89 e5       	ldi	r24, 0x59	; 89
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
    74c6:	41 de       	rcall	.-894    	; 0x714a <WriteNextResponseByte>
    74c8:	80 e0       	ldi	r24, 0x00	; 0
    74ca:	3f de       	rcall	.-898    	; 0x714a <WriteNextResponseByte>
    74cc:	80 e8       	ldi	r24, 0x80	; 128
    74ce:	86 cf       	rjmp	.-244    	; 0x73dc <CDC_Task+0x5a>
    74d0:	82 34       	cpi	r24, 0x42	; 66
    74d2:	19 f0       	breq	.+6      	; 0x74da <CDC_Task+0x158>
	}
	#if !defined(NO_BLOCK_SUPPORT)
	else if (Command == 'b')
    74d4:	87 36       	cpi	r24, 0x67	; 103
    74d6:	09 f0       	breq	.+2      	; 0x74da <CDC_Task+0x158>
	{
		WriteNextResponseByte('Y');
    74d8:	d5 c0       	rjmp	.+426    	; 0x7684 <CDC_Task+0x302>
    74da:	10 92 b9 01 	sts	0x01B9, r1

		// Send block size to the host 
		WriteNextResponseByte(SPM_PAGESIZE >> 8);
    74de:	10 92 b8 01 	sts	0x01B8, r1
    74e2:	1b de       	rcall	.-970    	; 0x711a <FetchNextCommandByte>
		WriteNextResponseByte(SPM_PAGESIZE & 0xFF);
    74e4:	d8 2e       	mov	r13, r24
    74e6:	19 de       	rcall	.-974    	; 0x711a <FetchNextCommandByte>
	}
	else if ((Command == 'B') || (Command == 'g'))
    74e8:	e8 2e       	mov	r14, r24
    74ea:	17 de       	rcall	.-978    	; 0x711a <FetchNextCommandByte>
    74ec:	c8 2f       	mov	r28, r24
    74ee:	8b eb       	ldi	r24, 0xBB	; 187
    74f0:	8c 0f       	add	r24, r28
	{
		// Keep resetting the timeout counter if we're receiving self-programming instructions
		Timeout = 0;
    74f2:	82 30       	cpi	r24, 0x02	; 2
    74f4:	10 f0       	brcs	.+4      	; 0x74fa <CDC_Task+0x178>
    74f6:	8f e3       	ldi	r24, 0x3F	; 63
    74f8:	71 cf       	rjmp	.-286    	; 0x73dc <CDC_Task+0x5a>
	char     MemoryType;

	bool     HighByte = false;
	uint8_t  LowByte  = 0;

	BlockSize  = (FetchNextCommandByte() << 8);
    74fa:	f1 2c       	mov	r15, r1
    74fc:	fd 28       	or	r15, r13
    74fe:	10 92 6f 00 	sts	0x006F, r1
	BlockSize |=  FetchNextCommandByte();
    7502:	d7 36       	cpi	r29, 0x67	; 103
    7504:	09 f0       	breq	.+2      	; 0x7508 <CDC_Task+0x186>

	MemoryType =  FetchNextCommandByte();
    7506:	45 c0       	rjmp	.+138    	; 0x7592 <CDC_Task+0x210>
    7508:	81 e1       	ldi	r24, 0x11	; 17
    750a:	80 93 57 00 	sts	0x0057, r24

	if ((MemoryType != 'E') && (MemoryType != 'F'))
    750e:	e8 95       	spm
    7510:	57 01       	movw	r10, r14
    7512:	91 2c       	mov	r9, r1
	{
		/* Send error byte back to the host */
		WriteNextResponseByte('?');
    7514:	d1 e0       	ldi	r29, 0x01	; 1
    7516:	a1 14       	cp	r10, r1
	char     MemoryType;

	bool     HighByte = false;
	uint8_t  LowByte  = 0;

	BlockSize  = (FetchNextCommandByte() << 8);
    7518:	b1 04       	cpc	r11, r1
	BlockSize |=  FetchNextCommandByte();
    751a:	09 f4       	brne	.+2      	; 0x751e <CDC_Task+0x19c>
		return;
	}

	/* Disable timer 1 interrupt - can't afford to process nonessential interrupts
	 * while doing SPM tasks */
	TIMSK1 = 0;
    751c:	af c0       	rjmp	.+350    	; 0x767c <CDC_Task+0x2fa>
    751e:	c0 90 ba 01 	lds	r12, 0x01BA

	/* Check if command is to read memory */
	if (Command == 'g')
    7522:	d0 90 bb 01 	lds	r13, 0x01BB
	{		
		/* Re-enable RWW section */
		boot_rww_enable();
    7526:	e0 90 bc 01 	lds	r14, 0x01BC
    752a:	f0 90 bd 01 	lds	r15, 0x01BD
    752e:	c6 34       	cpi	r28, 0x46	; 70
static void ReadWriteMemoryBlock(const uint8_t Command)
{
	uint16_t BlockSize;
	char     MemoryType;

	bool     HighByte = false;
    7530:	b9 f4       	brne	.+46     	; 0x7560 <CDC_Task+0x1de>

				/* If both bytes in current word have been read, increment the address counter */
				if (HighByte)
				  CurrAddress += 2;

				HighByte = !HighByte;
    7532:	e9 2d       	mov	r30, r9
	if (Command == 'g')
	{		
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
    7534:	f0 e0       	ldi	r31, 0x00	; 0
    7536:	ec 29       	or	r30, r12
    7538:	fd 29       	or	r31, r13
    753a:	84 91       	lpm	r24, Z
    753c:	06 de       	rcall	.-1012   	; 0x714a <WriteNextResponseByte>
    753e:	99 20       	and	r9, r9
    7540:	69 f0       	breq	.+26     	; 0x755c <CDC_Task+0x1da>
    7542:	82 e0       	ldi	r24, 0x02	; 2
    7544:	c8 0e       	add	r12, r24
    7546:	d1 1c       	adc	r13, r1
    7548:	e1 1c       	adc	r14, r1
    754a:	f1 1c       	adc	r15, r1
		{
			if (MemoryType == 'F')
    754c:	c0 92 ba 01 	sts	0x01BA, r12
			{
				/* Read the next FLASH byte from the current FLASH page */
				#if (FLASHEND > 0xFFFF)
				WriteNextResponseByte(pgm_read_byte_far(CurrAddress | HighByte));
				#else
				WriteNextResponseByte(pgm_read_byte(CurrAddress | HighByte));
    7550:	d0 92 bb 01 	sts	0x01BB, r13
    7554:	e0 92 bc 01 	sts	0x01BC, r14
    7558:	f0 92 bd 01 	sts	0x01BD, r15
    755c:	9d 26       	eor	r9, r29
				#endif

				/* If both bytes in current word have been read, increment the address counter */
				if (HighByte)
    755e:	15 c0       	rjmp	.+42     	; 0x758a <CDC_Task+0x208>
    7560:	d7 01       	movw	r26, r14
				  CurrAddress += 2;
    7562:	c6 01       	movw	r24, r12
    7564:	b6 95       	lsr	r27
    7566:	a7 95       	ror	r26
    7568:	97 95       	ror	r25
    756a:	87 95       	ror	r24
    756c:	ba d4       	rcall	.+2420   	; 0x7ee2 <__eerd_byte_m32u4>
    756e:	ed dd       	rcall	.-1062   	; 0x714a <WriteNextResponseByte>
    7570:	e2 e0       	ldi	r30, 0x02	; 2
    7572:	ce 0e       	add	r12, r30
    7574:	d1 1c       	adc	r13, r1
    7576:	e1 1c       	adc	r14, r1
    7578:	f1 1c       	adc	r15, r1
    757a:	c0 92 ba 01 	sts	0x01BA, r12

				HighByte = !HighByte;
    757e:	d0 92 bb 01 	sts	0x01BB, r13
			}
			else
			{
				/* Read the next EEPROM byte into the endpoint */
				WriteNextResponseByte(eeprom_read_byte((uint8_t*)(intptr_t)(CurrAddress >> 1)));
    7582:	e0 92 bc 01 	sts	0x01BC, r14
    7586:	f0 92 bd 01 	sts	0x01BD, r15
    758a:	f1 e0       	ldi	r31, 0x01	; 1
    758c:	af 1a       	sub	r10, r31
    758e:	b1 08       	sbc	r11, r1
    7590:	c2 cf       	rjmp	.-124    	; 0x7516 <CDC_Task+0x194>
    7592:	80 90 ba 01 	lds	r8, 0x01BA

				/* Increment the address counter after use */
				CurrAddress += 2;
    7596:	90 90 bb 01 	lds	r9, 0x01BB
    759a:	a0 90 bc 01 	lds	r10, 0x01BC
    759e:	b0 90 bd 01 	lds	r11, 0x01BD
    75a2:	c6 34       	cpi	r28, 0x46	; 70
    75a4:	21 f0       	breq	.+8      	; 0x75ae <CDC_Task+0x22c>
    75a6:	c1 2c       	mov	r12, r1
    75a8:	d1 2c       	mov	r13, r1
    75aa:	d1 e0       	ldi	r29, 0x01	; 1
    75ac:	30 c0       	rjmp	.+96     	; 0x760e <CDC_Task+0x28c>
    75ae:	83 e0       	ldi	r24, 0x03	; 3
    75b0:	f4 01       	movw	r30, r8
    75b2:	80 93 57 00 	sts	0x0057, r24
			}
		}
	}
	else
	{
		uint32_t PageStartAddress = CurrAddress;
    75b6:	e8 95       	spm
    75b8:	07 b6       	in	r0, 0x37	; 55
    75ba:	00 fc       	sbrc	r0, 0
    75bc:	fd cf       	rjmp	.-6      	; 0x75b8 <CDC_Task+0x236>
    75be:	f3 cf       	rjmp	.-26     	; 0x75a6 <CDC_Task+0x224>
    75c0:	c6 34       	cpi	r28, 0x46	; 70
    75c2:	61 f5       	brne	.+88     	; 0x761c <CDC_Task+0x29a>
    75c4:	dd 20       	and	r13, r13

		if (MemoryType == 'F')
    75c6:	39 f1       	breq	.+78     	; 0x7616 <CDC_Task+0x294>
    75c8:	40 90 ba 01 	lds	r4, 0x01BA
static void ReadWriteMemoryBlock(const uint8_t Command)
{
	uint16_t BlockSize;
	char     MemoryType;

	bool     HighByte = false;
    75cc:	50 90 bb 01 	lds	r5, 0x01BB
				else
				{
					LowByte = FetchNextCommandByte();
				}
				
				HighByte = !HighByte;
    75d0:	60 90 bc 01 	lds	r6, 0x01BC
	{
		uint32_t PageStartAddress = CurrAddress;

		if (MemoryType == 'F')
		{
			boot_page_erase(PageStartAddress);
    75d4:	70 90 bd 01 	lds	r7, 0x01BD
    75d8:	a0 dd       	rcall	.-1216   	; 0x711a <FetchNextCommandByte>
    75da:	2c 2d       	mov	r18, r12
			boot_spm_busy_wait();
    75dc:	30 e0       	ldi	r19, 0x00	; 0
    75de:	38 2b       	or	r19, r24
    75e0:	f2 01       	movw	r30, r4
    75e2:	09 01       	movw	r0, r18
		}

		while (BlockSize--)
		{
			if (MemoryType == 'F')
    75e4:	d0 93 57 00 	sts	0x0057, r29
			{
				/* If both bytes in current word have been written, increment the address counter */
				if (HighByte)
    75e8:	e8 95       	spm
    75ea:	11 24       	eor	r1, r1
				{
					/* Write the next FLASH word to the current FLASH page */
					boot_page_fill(CurrAddress, ((FetchNextCommandByte() << 8) | LowByte));
    75ec:	f2 e0       	ldi	r31, 0x02	; 2
    75ee:	4f 0e       	add	r4, r31
    75f0:	51 1c       	adc	r5, r1
    75f2:	61 1c       	adc	r6, r1
    75f4:	71 1c       	adc	r7, r1
    75f6:	40 92 ba 01 	sts	0x01BA, r4
    75fa:	50 92 bb 01 	sts	0x01BB, r5
    75fe:	60 92 bc 01 	sts	0x01BC, r6
    7602:	70 92 bd 01 	sts	0x01BD, r7
    7606:	dd 26       	eor	r13, r29
    7608:	21 e0       	ldi	r18, 0x01	; 1
    760a:	e2 1a       	sub	r14, r18
    760c:	f1 08       	sbc	r15, r1
    760e:	e1 14       	cp	r14, r1
    7610:	f1 04       	cpc	r15, r1

					/* Increment the address counter after use */
					CurrAddress += 2;
    7612:	b1 f6       	brne	.-84     	; 0x75c0 <CDC_Task+0x23e>
    7614:	27 c0       	rjmp	.+78     	; 0x7664 <CDC_Task+0x2e2>
    7616:	81 dd       	rcall	.-1278   	; 0x711a <FetchNextCommandByte>
    7618:	c8 2e       	mov	r12, r24
    761a:	f5 cf       	rjmp	.-22     	; 0x7606 <CDC_Task+0x284>
    761c:	7e dd       	rcall	.-1284   	; 0x711a <FetchNextCommandByte>
    761e:	68 2f       	mov	r22, r24
    7620:	80 91 ba 01 	lds	r24, 0x01BA
    7624:	90 91 bb 01 	lds	r25, 0x01BB
    7628:	a0 91 bc 01 	lds	r26, 0x01BC
				else
				{
					LowByte = FetchNextCommandByte();
				}
				
				HighByte = !HighByte;
    762c:	b0 91 bd 01 	lds	r27, 0x01BD
    7630:	b6 95       	lsr	r27
    7632:	a7 95       	ror	r26
		{
			boot_page_erase(PageStartAddress);
			boot_spm_busy_wait();
		}

		while (BlockSize--)
    7634:	97 95       	ror	r25
    7636:	87 95       	ror	r24
    7638:	5c d4       	rcall	.+2232   	; 0x7ef2 <__eewr_byte_m32u4>
    763a:	40 91 ba 01 	lds	r20, 0x01BA
					/* Increment the address counter after use */
					CurrAddress += 2;
				}
				else
				{
					LowByte = FetchNextCommandByte();
    763e:	50 91 bb 01 	lds	r21, 0x01BB
    7642:	60 91 bc 01 	lds	r22, 0x01BC
				HighByte = !HighByte;
			}
			else
			{
				/* Write the next EEPROM byte from the endpoint */
				eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
    7646:	70 91 bd 01 	lds	r23, 0x01BD
    764a:	4e 5f       	subi	r20, 0xFE	; 254
    764c:	5f 4f       	sbci	r21, 0xFF	; 255
    764e:	6f 4f       	sbci	r22, 0xFF	; 255
    7650:	7f 4f       	sbci	r23, 0xFF	; 255
    7652:	40 93 ba 01 	sts	0x01BA, r20
    7656:	50 93 bb 01 	sts	0x01BB, r21
    765a:	60 93 bc 01 	sts	0x01BC, r22
    765e:	70 93 bd 01 	sts	0x01BD, r23
    7662:	d2 cf       	rjmp	.-92     	; 0x7608 <CDC_Task+0x286>
    7664:	c6 34       	cpi	r28, 0x46	; 70

				/* Increment the address counter after use */
				CurrAddress += 2;
    7666:	41 f4       	brne	.+16     	; 0x7678 <CDC_Task+0x2f6>
    7668:	85 e0       	ldi	r24, 0x05	; 5
    766a:	f4 01       	movw	r30, r8
    766c:	80 93 57 00 	sts	0x0057, r24
    7670:	e8 95       	spm
    7672:	07 b6       	in	r0, 0x37	; 55
    7674:	00 fc       	sbrc	r0, 0
    7676:	fd cf       	rjmp	.-6      	; 0x7672 <CDC_Task+0x2f0>
    7678:	8d e0       	ldi	r24, 0x0D	; 13
    767a:	67 dd       	rcall	.-1330   	; 0x714a <WriteNextResponseByte>
    767c:	82 e0       	ldi	r24, 0x02	; 2
    767e:	80 93 6f 00 	sts	0x006F, r24
    7682:	94 c0       	rjmp	.+296    	; 0x77ac <CDC_Task+0x42a>
    7684:	83 34       	cpi	r24, 0x43	; 67
    7686:	71 f4       	brne	.+28     	; 0x76a4 <CDC_Task+0x322>
    7688:	c0 91 ba 01 	lds	r28, 0x01BA
    768c:	d0 91 bb 01 	lds	r29, 0x01BB
			}
		}

		/* If in FLASH programming mode, commit the page after writing */
		if (MemoryType == 'F')
    7690:	44 dd       	rcall	.-1400   	; 0x711a <FetchNextCommandByte>
    7692:	90 e0       	ldi	r25, 0x00	; 0
		{
			/* Commit the flash page to memory */
			boot_page_write(PageStartAddress);
    7694:	21 e0       	ldi	r18, 0x01	; 1
    7696:	fe 01       	movw	r30, r28
    7698:	0c 01       	movw	r0, r24
    769a:	20 93 57 00 	sts	0x0057, r18

			/* Wait until write operation has completed */
			boot_spm_busy_wait();
    769e:	e8 95       	spm
    76a0:	11 24       	eor	r1, r1
    76a2:	9b ce       	rjmp	.-714    	; 0x73da <CDC_Task+0x58>
		}

		/* Send response byte back to the host */
		WriteNextResponseByte('\r');
    76a4:	83 36       	cpi	r24, 0x63	; 99
    76a6:	01 f5       	brne	.+64     	; 0x76e8 <CDC_Task+0x366>
    76a8:	c0 90 ba 01 	lds	r12, 0x01BA
	}

	/* Re-enable timer 1 interrupt disabled earlier in this routine */	
	TIMSK1 = (1 << OCIE1A);
    76ac:	d0 90 bb 01 	lds	r13, 0x01BB
    76b0:	e0 90 bc 01 	lds	r14, 0x01BC
		// Delegate the block write/read to a separate function for clarity 
		ReadWriteMemoryBlock(Command);
	}
	#endif
	#if !defined(NO_FLASH_BYTE_SUPPORT)
	else if (Command == 'C')
    76b4:	f0 90 bd 01 	lds	r15, 0x01BD
	{
		// Write the high byte to the current flash page
		boot_page_fill(CurrAddress, FetchNextCommandByte());
    76b8:	30 dd       	rcall	.-1440   	; 0x711a <FetchNextCommandByte>
    76ba:	f6 01       	movw	r30, r12
    76bc:	e1 60       	ori	r30, 0x01	; 1
    76be:	90 e0       	ldi	r25, 0x00	; 0
    76c0:	21 e0       	ldi	r18, 0x01	; 1
    76c2:	0c 01       	movw	r0, r24
    76c4:	20 93 57 00 	sts	0x0057, r18
    76c8:	e8 95       	spm
    76ca:	11 24       	eor	r1, r1
    76cc:	f2 e0       	ldi	r31, 0x02	; 2
    76ce:	cf 0e       	add	r12, r31
    76d0:	d1 1c       	adc	r13, r1
    76d2:	e1 1c       	adc	r14, r1

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 'c')
    76d4:	f1 1c       	adc	r15, r1
    76d6:	c0 92 ba 01 	sts	0x01BA, r12
	{
		// Write the low byte to the current flash page 
		boot_page_fill(CurrAddress | 0x01, FetchNextCommandByte());
    76da:	d0 92 bb 01 	sts	0x01BB, r13
    76de:	e0 92 bc 01 	sts	0x01BC, r14
    76e2:	f0 92 bd 01 	sts	0x01BD, r15
    76e6:	79 ce       	rjmp	.-782    	; 0x73da <CDC_Task+0x58>
    76e8:	8d 36       	cpi	r24, 0x6D	; 109
    76ea:	61 f4       	brne	.+24     	; 0x7704 <CDC_Task+0x382>
    76ec:	e0 91 ba 01 	lds	r30, 0x01BA
    76f0:	f0 91 bb 01 	lds	r31, 0x01BB
    76f4:	85 e0       	ldi	r24, 0x05	; 5
    76f6:	80 93 57 00 	sts	0x0057, r24
    76fa:	e8 95       	spm
    76fc:	07 b6       	in	r0, 0x37	; 55

		// Increment the address 
		CurrAddress += 2;
    76fe:	00 fc       	sbrc	r0, 0
    7700:	fd cf       	rjmp	.-6      	; 0x76fc <CDC_Task+0x37a>
    7702:	6b ce       	rjmp	.-810    	; 0x73da <CDC_Task+0x58>
    7704:	82 35       	cpi	r24, 0x52	; 82
    7706:	51 f4       	brne	.+20     	; 0x771c <CDC_Task+0x39a>
    7708:	e0 91 ba 01 	lds	r30, 0x01BA
    770c:	f0 91 bb 01 	lds	r31, 0x01BB
    7710:	c5 91       	lpm	r28, Z+
    7712:	d4 91       	lpm	r29, Z
    7714:	8d 2f       	mov	r24, r29
    7716:	19 dd       	rcall	.-1486   	; 0x714a <WriteNextResponseByte>
    7718:	8c 2f       	mov	r24, r28

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 'm')
    771a:	60 ce       	rjmp	.-832    	; 0x73dc <CDC_Task+0x5a>
    771c:	84 34       	cpi	r24, 0x44	; 68
	{
		// Commit the flash page to memory
		boot_page_write(CurrAddress);
    771e:	19 f5       	brne	.+70     	; 0x7766 <CDC_Task+0x3e4>
    7720:	fc dc       	rcall	.-1544   	; 0x711a <FetchNextCommandByte>
    7722:	68 2f       	mov	r22, r24
    7724:	80 91 ba 01 	lds	r24, 0x01BA
    7728:	90 91 bb 01 	lds	r25, 0x01BB
    772c:	a0 91 bc 01 	lds	r26, 0x01BC

		// Wait until write operation has completed 
		boot_spm_busy_wait();
    7730:	b0 91 bd 01 	lds	r27, 0x01BD
    7734:	b6 95       	lsr	r27

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 'R')
    7736:	a7 95       	ror	r26
    7738:	97 95       	ror	r25
	{
		#if (FLASHEND > 0xFFFF)
		uint16_t ProgramWord = pgm_read_word_far(CurrAddress);
		#else
		uint16_t ProgramWord = pgm_read_word(CurrAddress);
    773a:	87 95       	ror	r24
    773c:	da d3       	rcall	.+1972   	; 0x7ef2 <__eewr_byte_m32u4>
    773e:	80 91 ba 01 	lds	r24, 0x01BA
    7742:	90 91 bb 01 	lds	r25, 0x01BB
		#endif

		WriteNextResponseByte(ProgramWord >> 8);
    7746:	a0 91 bc 01 	lds	r26, 0x01BC
    774a:	b0 91 bd 01 	lds	r27, 0x01BD
		WriteNextResponseByte(ProgramWord & 0xFF);
    774e:	02 96       	adiw	r24, 0x02	; 2
	}
	#endif
	#if !defined(NO_EEPROM_BYTE_SUPPORT)
	else if (Command == 'D')
    7750:	a1 1d       	adc	r26, r1
    7752:	b1 1d       	adc	r27, r1
	{
		// Read the byte from the endpoint and write it to the EEPROM 
		eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
    7754:	80 93 ba 01 	sts	0x01BA, r24
    7758:	90 93 bb 01 	sts	0x01BB, r25
    775c:	a0 93 bc 01 	sts	0x01BC, r26
    7760:	b0 93 bd 01 	sts	0x01BD, r27
    7764:	3a ce       	rjmp	.-908    	; 0x73da <CDC_Task+0x58>
    7766:	84 36       	cpi	r24, 0x64	; 100
    7768:	f1 f4       	brne	.+60     	; 0x77a6 <CDC_Task+0x424>
    776a:	c0 90 ba 01 	lds	r12, 0x01BA
    776e:	d0 90 bb 01 	lds	r13, 0x01BB
    7772:	e0 90 bc 01 	lds	r14, 0x01BC

		// Increment the address after use
		CurrAddress += 2;
    7776:	f0 90 bd 01 	lds	r15, 0x01BD
    777a:	d7 01       	movw	r26, r14
    777c:	c6 01       	movw	r24, r12
    777e:	b6 95       	lsr	r27
    7780:	a7 95       	ror	r26
    7782:	97 95       	ror	r25
    7784:	87 95       	ror	r24
    7786:	ad d3       	rcall	.+1882   	; 0x7ee2 <__eerd_byte_m32u4>
    7788:	e0 dc       	rcall	.-1600   	; 0x714a <WriteNextResponseByte>
    778a:	22 e0       	ldi	r18, 0x02	; 2
    778c:	c2 0e       	add	r12, r18
    778e:	d1 1c       	adc	r13, r1
    7790:	e1 1c       	adc	r14, r1
    7792:	f1 1c       	adc	r15, r1
    7794:	c0 92 ba 01 	sts	0x01BA, r12
    7798:	d0 92 bb 01 	sts	0x01BB, r13
    779c:	e0 92 bc 01 	sts	0x01BC, r14

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 'd')
    77a0:	f0 92 bd 01 	sts	0x01BD, r15
	{
		// Read the EEPROM byte and write it to the endpoint 
		WriteNextResponseByte(eeprom_read_byte((uint8_t*)((intptr_t)(CurrAddress >> 1))));
    77a4:	03 c0       	rjmp	.+6      	; 0x77ac <CDC_Task+0x42a>
    77a6:	8b 31       	cpi	r24, 0x1B	; 27
    77a8:	09 f0       	breq	.+2      	; 0x77ac <CDC_Task+0x42a>
    77aa:	a5 ce       	rjmp	.-694    	; 0x74f6 <CDC_Task+0x174>
    77ac:	83 e0       	ldi	r24, 0x03	; 3
    77ae:	80 93 e9 00 	sts	0x00E9, r24
    77b2:	90 91 e8 00 	lds	r25, 0x00E8
    77b6:	80 91 e8 00 	lds	r24, 0x00E8
    77ba:	8e 77       	andi	r24, 0x7E	; 126
    77bc:	80 93 e8 00 	sts	0x00E8, r24
    77c0:	95 fd       	sbrc	r25, 5
    77c2:	11 c0       	rjmp	.+34     	; 0x77e6 <CDC_Task+0x464>
    77c4:	80 91 e8 00 	lds	r24, 0x00E8

		// Increment the address after use 
		CurrAddress += 2;
    77c8:	80 fd       	sbrc	r24, 0
    77ca:	04 c0       	rjmp	.+8      	; 0x77d4 <CDC_Task+0x452>
    77cc:	8e b3       	in	r24, 0x1e	; 30
    77ce:	81 11       	cpse	r24, r1
    77d0:	f9 cf       	rjmp	.-14     	; 0x77c4 <CDC_Task+0x442>
    77d2:	15 c0       	rjmp	.+42     	; 0x77fe <CDC_Task+0x47c>
    77d4:	80 91 e8 00 	lds	r24, 0x00E8
    77d8:	8e 77       	andi	r24, 0x7E	; 126
    77da:	80 93 e8 00 	sts	0x00E8, r24
    77de:	03 c0       	rjmp	.+6      	; 0x77e6 <CDC_Task+0x464>
    77e0:	8e b3       	in	r24, 0x1e	; 30
	}
	#endif
	else if (Command != 27)
    77e2:	88 23       	and	r24, r24
    77e4:	61 f0       	breq	.+24     	; 0x77fe <CDC_Task+0x47c>
    77e6:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    77ea:	80 ff       	sbrs	r24, 0
    77ec:	f9 cf       	rjmp	.-14     	; 0x77e0 <CDC_Task+0x45e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    77ee:	84 e0       	ldi	r24, 0x04	; 4
    77f0:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    77f4:	80 91 e8 00 	lds	r24, 0x00E8
    77f8:	8b 77       	andi	r24, 0x7B	; 123
    77fa:	80 93 e8 00 	sts	0x00E8, r24

	/* Send the endpoint data to the host */
	Endpoint_ClearIN();

	/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer */
	if (IsEndpointFull)
    77fe:	df 91       	pop	r29
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7800:	cf 91       	pop	r28
    7802:	ff 90       	pop	r15
	{
		while (!(Endpoint_IsINReady()))
    7804:	ef 90       	pop	r14
    7806:	df 90       	pop	r13
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    7808:	cf 90       	pop	r12
    780a:	bf 90       	pop	r11
    780c:	af 90       	pop	r10
    780e:	9f 90       	pop	r9
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7810:	8f 90       	pop	r8
    7812:	7f 90       	pop	r7
    7814:	6f 90       	pop	r6
    7816:	5f 90       	pop	r5
    7818:	4f 90       	pop	r4
    781a:	08 95       	ret

0000781c <main>:
	}

	/* Wait until the data has been sent to the host */
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
    781c:	0f 93       	push	r16
    781e:	1f 93       	push	r17
    7820:	cf 93       	push	r28
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7822:	df 93       	push	r29
    7824:	c0 91 00 08 	lds	r28, 0x0800

		Endpoint_ClearIN();
	}

	/* Wait until the data has been sent to the host */
	while (!(Endpoint_IsINReady()))
    7828:	d0 91 01 08 	lds	r29, 0x0801
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    782c:	10 92 01 08 	sts	0x0801, r1
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7830:	10 92 00 08 	sts	0x0800, r1
    7834:	14 b7       	in	r17, 0x34	; 52
    7836:	14 be       	out	0x34, r1	; 52
    7838:	88 e1       	ldi	r24, 0x18	; 24
	/* Select the OUT endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* Acknowledge the command from the host */
	Endpoint_ClearOUT();
}
    783a:	0f b6       	in	r0, 0x3f	; 63
    783c:	f8 94       	cli
    783e:	80 93 60 00 	sts	0x0060, r24
    7842:	10 92 60 00 	sts	0x0060, r1
    7846:	0f be       	out	0x3f, r0	; 63
    7848:	11 fd       	sbrc	r17, 1
    784a:	0d c0       	rjmp	.+26     	; 0x7866 <main+0x4a>
    784c:	01 2f       	mov	r16, r17
    784e:	08 70       	andi	r16, 0x08	; 8
    7850:	13 fd       	sbrc	r17, 3
    7852:	b7 dc       	rcall	.-1682   	; 0x71c2 <copyflashIfValid>
    7854:	10 ff       	sbrs	r17, 0
    7856:	1e c0       	rjmp	.+60     	; 0x7894 <main+0x78>


	if (mcusr_state & (1<<EXTRF)) {
		// External reset -  we should continue to self-programming mode.
		Dputch('e');
	} else if (mcusr_state & (1<<PORF) && pgm_read_word(0) != 0xFFFF) {		
    7858:	e0 e0       	ldi	r30, 0x00	; 0
    785a:	f0 e0       	ldi	r31, 0x00	; 0
    785c:	85 91       	lpm	r24, Z+
    785e:	94 91       	lpm	r25, Z
    7860:	01 96       	adiw	r24, 0x01	; 1
    7862:	c1 f0       	breq	.+48     	; 0x7894 <main+0x78>
    7864:	89 dc       	rcall	.-1774   	; 0x7178 <StartSketch>
		// After a power-on reset skip the bootloader and jump straight to sketch 
		// if one exists.
		Dputch('f');
		StartSketch();
    7866:	02 dd       	rcall	.-1532   	; 0x726c <SetupHardware>
    7868:	78 94       	sei
		Dputch('i');
	}
	
	Dputch('j');
	/* Setup hardware required for the bootloader */
	SetupHardware();
    786a:	10 92 b9 01 	sts	0x01B9, r1

	/* Enable global interrupts so that the USB stack can function */
	sei();
    786e:	10 92 b8 01 	sts	0x01B8, r1
	
	Timeout = 0;
    7872:	80 91 02 01 	lds	r24, 0x0102
    7876:	88 23       	and	r24, r24

	while (RunBootloader)
    7878:	e9 f0       	breq	.+58     	; 0x78b4 <main+0x98>
    787a:	83 dd       	rcall	.-1274   	; 0x7382 <CDC_Task>
    787c:	1b d3       	rcall	.+1590   	; 0x7eb4 <USB_USBTask>
    787e:	80 91 b8 01 	lds	r24, 0x01B8
	{
		CDC_Task();
    7882:	90 91 b9 01 	lds	r25, 0x01B9
		USB_USBTask();
    7886:	81 3a       	cpi	r24, 0xA1	; 161
		/* Time out and start the sketch if one is present */
		if (Timeout > TIMEOUT_PERIOD)
    7888:	9f 40       	sbci	r25, 0x0F	; 15
    788a:	10 f0       	brcs	.+4      	; 0x7890 <main+0x74>
    788c:	10 92 02 01 	sts	0x0102, r1
    7890:	83 dc       	rcall	.-1786   	; 0x7198 <LEDPulse>
    7892:	ef cf       	rjmp	.-34     	; 0x7872 <main+0x56>
    7894:	00 23       	and	r16, r16
			RunBootloader = false;
    7896:	39 f3       	breq	.-50     	; 0x7866 <main+0x4a>
    7898:	80 91 00 01 	lds	r24, 0x0100

		LEDPulse();
    789c:	90 91 01 01 	lds	r25, 0x0101
		// After a power-on reset skip the bootloader and jump straight to sketch 
		// if one exists.
		Dputch('f');
		StartSketch();
		Dputch('g');
	} else if ((mcusr_state & (1<<WDRF)) && (bootKeyPtrVal != bootKey) && (pgm_read_word(0) != 0xFFFF)) {	
    78a0:	c8 17       	cp	r28, r24
    78a2:	d9 07       	cpc	r29, r25
    78a4:	01 f3       	breq	.-64     	; 0x7866 <main+0x4a>
    78a6:	e0 e0       	ldi	r30, 0x00	; 0
    78a8:	f0 e0       	ldi	r31, 0x00	; 0
    78aa:	85 91       	lpm	r24, Z+
    78ac:	94 91       	lpm	r25, Z
    78ae:	01 96       	adiw	r24, 0x01	; 1
    78b0:	c9 f6       	brne	.-78     	; 0x7864 <main+0x48>
    78b2:	d9 cf       	rjmp	.-78     	; 0x7866 <main+0x4a>
    78b4:	80 91 e0 00 	lds	r24, 0x00E0
    78b8:	81 60       	ori	r24, 0x01	; 1
    78ba:	80 93 e0 00 	sts	0x00E0, r24
    78be:	5c dc       	rcall	.-1864   	; 0x7178 <StartSketch>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    78c0:	80 e0       	ldi	r24, 0x00	; 0
    78c2:	90 e0       	ldi	r25, 0x00	; 0
    78c4:	df 91       	pop	r29
    78c6:	cf 91       	pop	r28
    78c8:	1f 91       	pop	r17
	}
	/* Disconnect from the host - USB interface will be reset later along with the AVR */
	USB_Detach();

	/* Jump to beginning of application space to run the sketch - do not reset */	
	StartSketch();
    78ca:	0f 91       	pop	r16
    78cc:	08 95       	ret

000078ce <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
    78ce:	29 2f       	mov	r18, r25
    78d0:	30 e0       	ldi	r19, 0x00	; 0
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    78d2:	22 30       	cpi	r18, 0x02	; 2
    78d4:	31 05       	cpc	r19, r1
    78d6:	39 f0       	breq	.+14     	; 0x78e6 <CALLBACK_USB_GetDescriptor+0x18>
    78d8:	23 30       	cpi	r18, 0x03	; 3
    78da:	31 05       	cpc	r19, r1
    78dc:	49 f0       	breq	.+18     	; 0x78f0 <CALLBACK_USB_GetDescriptor+0x22>
    78de:	21 30       	cpi	r18, 0x01	; 1
    78e0:	31 05       	cpc	r19, r1
    78e2:	61 f4       	brne	.+24     	; 0x78fc <CALLBACK_USB_GetDescriptor+0x2e>
    78e4:	10 c0       	rjmp	.+32     	; 0x7906 <CALLBACK_USB_GetDescriptor+0x38>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    78e6:	8e e3       	ldi	r24, 0x3E	; 62
    78e8:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    78ea:	2e e5       	ldi	r18, 0x5E	; 94
    78ec:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    78ee:	1e c0       	rjmp	.+60     	; 0x792c <CALLBACK_USB_GetDescriptor+0x5e>
		case DTYPE_String:
			if (!(DescriptorNumber))
    78f0:	88 23       	and	r24, r24
    78f2:	71 f0       	breq	.+28     	; 0x7910 <CALLBACK_USB_GetDescriptor+0x42>
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == DeviceDescriptor.ProductStrIndex) 
    78f4:	81 30       	cpi	r24, 0x01	; 1
    78f6:	89 f0       	breq	.+34     	; 0x791a <CALLBACK_USB_GetDescriptor+0x4c>
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
			} else if (DescriptorNumber == DeviceDescriptor.ManufacturerStrIndex)
    78f8:	82 30       	cpi	r24, 0x02	; 2
    78fa:	a1 f0       	breq	.+40     	; 0x7924 <CALLBACK_USB_GetDescriptor+0x56>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    78fc:	80 e0       	ldi	r24, 0x00	; 0
    78fe:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    7900:	20 e0       	ldi	r18, 0x00	; 0
    7902:	30 e0       	ldi	r19, 0x00	; 0
    7904:	13 c0       	rjmp	.+38     	; 0x792c <CALLBACK_USB_GetDescriptor+0x5e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    7906:	82 e1       	ldi	r24, 0x12	; 18
    7908:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    790a:	2c e9       	ldi	r18, 0x9C	; 156
    790c:	31 e0       	ldi	r19, 0x01	; 1
    790e:	0e c0       	rjmp	.+28     	; 0x792c <CALLBACK_USB_GetDescriptor+0x5e>
			break;
		case DTYPE_String:
			if (!(DescriptorNumber))
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
    7910:	84 e0       	ldi	r24, 0x04	; 4
    7912:	90 e0       	ldi	r25, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			if (!(DescriptorNumber))
			{
				Address = &LanguageString;
    7914:	2a e5       	ldi	r18, 0x5A	; 90
    7916:	31 e0       	ldi	r19, 0x01	; 1
    7918:	09 c0       	rjmp	.+18     	; 0x792c <CALLBACK_USB_GetDescriptor+0x5e>
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == DeviceDescriptor.ProductStrIndex) 
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
    791a:	8e e1       	ldi	r24, 0x1E	; 30
    791c:	90 e0       	ldi	r25, 0x00	; 0
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == DeviceDescriptor.ProductStrIndex) 
			{
				Address = &ProductString;
    791e:	26 e3       	ldi	r18, 0x36	; 54
    7920:	31 e0       	ldi	r19, 0x01	; 1
    7922:	04 c0       	rjmp	.+8      	; 0x792c <CALLBACK_USB_GetDescriptor+0x5e>
				Size    = ProductString.Header.Size;
			} else if (DescriptorNumber == DeviceDescriptor.ManufacturerStrIndex)
			{
				Address = &ManufNameString;
				Size	= ManufNameString.Header.Size;
    7924:	8a e2       	ldi	r24, 0x2A	; 42
    7926:	90 e0       	ldi	r25, 0x00	; 0
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
			} else if (DescriptorNumber == DeviceDescriptor.ManufacturerStrIndex)
			{
				Address = &ManufNameString;
    7928:	2a e0       	ldi	r18, 0x0A	; 10
    792a:	31 e0       	ldi	r19, 0x01	; 1
			}

			break;
	}

	*DescriptorAddress = Address;
    792c:	fa 01       	movw	r30, r20
    792e:	31 83       	std	Z+1, r19	; 0x01
    7930:	20 83       	st	Z, r18
	return Size;
}
    7932:	08 95       	ret

00007934 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7934:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    7938:	eb ee       	ldi	r30, 0xEB	; 235
    793a:	f0 e0       	ldi	r31, 0x00	; 0
    793c:	80 81       	ld	r24, Z
    793e:	81 60       	ori	r24, 0x01	; 1
    7940:	80 83       	st	Z, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
    7942:	ed ee       	ldi	r30, 0xED	; 237
    7944:	f0 e0       	ldi	r31, 0x00	; 0
    7946:	10 82       	st	Z, r1
	UECFG0X = UECFG0XData;
    7948:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
    794c:	40 83       	st	Z, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    794e:	80 91 ee 00 	lds	r24, 0x00EE
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    7952:	88 1f       	adc	r24, r24
    7954:	88 27       	eor	r24, r24
    7956:	88 1f       	adc	r24, r24
    7958:	08 95       	ret

0000795a <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    795a:	80 91 c2 01 	lds	r24, 0x01C2
    795e:	87 fd       	sbrc	r24, 7
    7960:	05 c0       	rjmp	.+10     	; 0x796c <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7962:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    7966:	80 ff       	sbrs	r24, 0
    7968:	0d c0       	rjmp	.+26     	; 0x7984 <Endpoint_ClearStatusStage+0x2a>
    796a:	10 c0       	rjmp	.+32     	; 0x798c <Endpoint_ClearStatusStage+0x32>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    796c:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    7970:	82 fd       	sbrc	r24, 2
    7972:	04 c0       	rjmp	.+8      	; 0x797c <Endpoint_ClearStatusStage+0x22>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    7974:	8e b3       	in	r24, 0x1e	; 30
    7976:	81 11       	cpse	r24, r1
    7978:	f9 cf       	rjmp	.-14     	; 0x796c <Endpoint_ClearStatusStage+0x12>
    797a:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    797c:	80 91 e8 00 	lds	r24, 0x00E8
    7980:	8b 77       	andi	r24, 0x7B	; 123
    7982:	07 c0       	rjmp	.+14     	; 0x7992 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    7984:	8e b3       	in	r24, 0x1e	; 30
    7986:	81 11       	cpse	r24, r1
    7988:	ec cf       	rjmp	.-40     	; 0x7962 <Endpoint_ClearStatusStage+0x8>
    798a:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    798c:	80 91 e8 00 	lds	r24, 0x00E8
    7990:	8e 77       	andi	r24, 0x7E	; 126
    7992:	80 93 e8 00 	sts	0x00E8, r24
    7996:	08 95       	ret

00007998 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    7998:	0f 93       	push	r16
    799a:	1f 93       	push	r17
    799c:	cf 93       	push	r28
    799e:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    79a0:	41 d0       	rcall	.+130    	; 0x7a24 <USB_INT_DisableAllInterrupts>
    79a2:	48 d0       	rcall	.+144    	; 0x7a34 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    79a4:	c8 ed       	ldi	r28, 0xD8	; 216
    79a6:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    79a8:	88 81       	ld	r24, Y
    79aa:	8f 77       	andi	r24, 0x7F	; 127
    79ac:	88 83       	st	Y, r24
    79ae:	88 81       	ld	r24, Y
    79b0:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
    79b2:	88 83       	st	Y, r24
    79b4:	88 81       	ld	r24, Y
    79b6:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    79b8:	88 83       	st	Y, r24
    79ba:	19 bc       	out	0x29, r1	; 41
    79bc:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    79be:	10 92 c0 01 	sts	0x01C0, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
    79c2:	00 ee       	ldi	r16, 0xE0	; 224
    79c4:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    79c6:	f8 01       	movw	r30, r16
    79c8:	80 81       	ld	r24, Z
    79ca:	8b 7f       	andi	r24, 0xFB	; 251
    79cc:	80 83       	st	Z, r24
    79ce:	88 81       	ld	r24, Y
    79d0:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    79d2:	88 83       	st	Y, r24
    79d4:	42 e0       	ldi	r20, 0x02	; 2
    79d6:	60 e0       	ldi	r22, 0x00	; 0
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    79d8:	80 e0       	ldi	r24, 0x00	; 0
    79da:	ac df       	rcall	.-168    	; 0x7934 <Endpoint_ConfigureEndpoint_Prv>
    79dc:	e1 ee       	ldi	r30, 0xE1	; 225
    79de:	f0 e0       	ldi	r31, 0x00	; 0
    79e0:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    79e2:	8e 7f       	andi	r24, 0xFE	; 254
    79e4:	80 83       	st	Z, r24
    79e6:	e2 ee       	ldi	r30, 0xE2	; 226
    79e8:	f0 e0       	ldi	r31, 0x00	; 0
    79ea:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    79ec:	81 60       	ori	r24, 0x01	; 1
    79ee:	80 83       	st	Z, r24
    79f0:	80 81       	ld	r24, Z
    79f2:	88 60       	ori	r24, 0x08	; 8
    79f4:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    79f6:	f8 01       	movw	r30, r16
    79f8:	80 81       	ld	r24, Z
    79fa:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    79fc:	80 83       	st	Z, r24
    79fe:	88 81       	ld	r24, Y
    7a00:	80 61       	ori	r24, 0x10	; 16
    7a02:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    7a04:	df 91       	pop	r29
    7a06:	cf 91       	pop	r28
    7a08:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    7a0a:	0f 91       	pop	r16
    7a0c:	08 95       	ret

00007a0e <USB_Init>:
    7a0e:	e7 ed       	ldi	r30, 0xD7	; 215
    7a10:	f0 e0       	ldi	r31, 0x00	; 0
    7a12:	80 81       	ld	r24, Z

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
    7a14:	81 60       	ori	r24, 0x01	; 1
    7a16:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
    7a18:	8a e4       	ldi	r24, 0x4A	; 74
    7a1a:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    7a1c:	81 e0       	ldi	r24, 0x01	; 1
    7a1e:	80 93 c1 01 	sts	0x01C1, r24

	USB_ResetInterface();
    7a22:	ba cf       	rjmp	.-140    	; 0x7998 <USB_ResetInterface>

00007a24 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    7a24:	e8 ed       	ldi	r30, 0xD8	; 216
    7a26:	f0 e0       	ldi	r31, 0x00	; 0
    7a28:	80 81       	ld	r24, Z
    7a2a:	8e 7f       	andi	r24, 0xFE	; 254
    7a2c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    7a2e:	10 92 e2 00 	sts	0x00E2, r1
    7a32:	08 95       	ret

00007a34 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    7a34:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    7a38:	10 92 e1 00 	sts	0x00E1, r1
    7a3c:	08 95       	ret

00007a3e <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    7a3e:	1f 92       	push	r1
    7a40:	0f 92       	push	r0
    7a42:	0f b6       	in	r0, 0x3f	; 63
    7a44:	0f 92       	push	r0
    7a46:	11 24       	eor	r1, r1
    7a48:	2f 93       	push	r18
    7a4a:	3f 93       	push	r19
    7a4c:	4f 93       	push	r20
    7a4e:	5f 93       	push	r21
    7a50:	6f 93       	push	r22
    7a52:	7f 93       	push	r23
    7a54:	8f 93       	push	r24
    7a56:	9f 93       	push	r25
    7a58:	af 93       	push	r26
    7a5a:	bf 93       	push	r27
    7a5c:	ef 93       	push	r30
    7a5e:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    7a60:	80 91 da 00 	lds	r24, 0x00DA
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    7a64:	80 ff       	sbrs	r24, 0
    7a66:	19 c0       	rjmp	.+50     	; 0x7a9a <__vector_10+0x5c>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    7a68:	80 91 d8 00 	lds	r24, 0x00D8
    7a6c:	80 ff       	sbrs	r24, 0
    7a6e:	15 c0       	rjmp	.+42     	; 0x7a9a <__vector_10+0x5c>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    7a70:	80 91 da 00 	lds	r24, 0x00DA
    7a74:	8e 7f       	andi	r24, 0xFE	; 254
    7a76:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    7a7a:	80 91 d9 00 	lds	r24, 0x00D9

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    7a7e:	19 bc       	out	0x29, r1	; 41
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    7a80:	80 ff       	sbrs	r24, 0
    7a82:	09 c0       	rjmp	.+18     	; 0x7a96 <__vector_10+0x58>
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    7a84:	82 e0       	ldi	r24, 0x02	; 2
    7a86:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    7a88:	09 b4       	in	r0, 0x29	; 41
    7a8a:	00 fe       	sbrs	r0, 0
    7a8c:	fd cf       	rjmp	.-6      	; 0x7a88 <__vector_10+0x4a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    7a8e:	81 e0       	ldi	r24, 0x01	; 1
    7a90:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
    7a92:	0f d2       	rcall	.+1054   	; 0x7eb2 <USB_Event_Stub>
    7a94:	02 c0       	rjmp	.+4      	; 0x7a9a <__vector_10+0x5c>
    7a96:	1e ba       	out	0x1e, r1	; 30
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    7a98:	0c d2       	rcall	.+1048   	; 0x7eb2 <USB_Event_Stub>
			EVENT_USB_Device_Disconnect();
    7a9a:	80 91 e1 00 	lds	r24, 0x00E1
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    7a9e:	80 ff       	sbrs	r24, 0
    7aa0:	17 c0       	rjmp	.+46     	; 0x7ad0 <__vector_10+0x92>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    7aa2:	80 91 e2 00 	lds	r24, 0x00E2
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    7aa6:	80 ff       	sbrs	r24, 0
    7aa8:	13 c0       	rjmp	.+38     	; 0x7ad0 <__vector_10+0x92>
    7aaa:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    7aae:	8e 7f       	andi	r24, 0xFE	; 254
    7ab0:	80 93 e2 00 	sts	0x00E2, r24
    7ab4:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    7ab8:	80 61       	ori	r24, 0x10	; 16
    7aba:	80 93 e2 00 	sts	0x00E2, r24
    7abe:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
    7ac2:	80 62       	ori	r24, 0x20	; 32
    7ac4:	80 93 d8 00 	sts	0x00D8, r24
    7ac8:	19 bc       	out	0x29, r1	; 41
    7aca:	85 e0       	ldi	r24, 0x05	; 5
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    7acc:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    7ace:	f1 d1       	rcall	.+994    	; 0x7eb2 <USB_Event_Stub>
    7ad0:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
    7ad4:	84 ff       	sbrs	r24, 4
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    7ad6:	2b c0       	rjmp	.+86     	; 0x7b2e <__vector_10+0xf0>
    7ad8:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    7adc:	84 ff       	sbrs	r24, 4
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    7ade:	27 c0       	rjmp	.+78     	; 0x7b2e <__vector_10+0xf0>
    7ae0:	19 bc       	out	0x29, r1	; 41
    7ae2:	82 e0       	ldi	r24, 0x02	; 2
    7ae4:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    7ae6:	09 b4       	in	r0, 0x29	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    7ae8:	00 fe       	sbrs	r0, 0
    7aea:	fd cf       	rjmp	.-6      	; 0x7ae6 <__vector_10+0xa8>
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    7aec:	80 91 d8 00 	lds	r24, 0x00D8
    7af0:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    7af2:	80 93 d8 00 	sts	0x00D8, r24
    7af6:	80 91 e1 00 	lds	r24, 0x00E1
    7afa:	8f 7e       	andi	r24, 0xEF	; 239
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    7afc:	80 93 e1 00 	sts	0x00E1, r24
    7b00:	80 91 e2 00 	lds	r24, 0x00E2
    7b04:	8f 7e       	andi	r24, 0xEF	; 239
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    7b06:	80 93 e2 00 	sts	0x00E2, r24
    7b0a:	80 91 e2 00 	lds	r24, 0x00E2
    7b0e:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    7b10:	80 93 e2 00 	sts	0x00E2, r24
    7b14:	80 91 c0 01 	lds	r24, 0x01C0
    7b18:	81 11       	cpse	r24, r1
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    7b1a:	04 c0       	rjmp	.+8      	; 0x7b24 <__vector_10+0xe6>
    7b1c:	80 91 e3 00 	lds	r24, 0x00E3
    7b20:	87 ff       	sbrs	r24, 7
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7b22:	02 c0       	rjmp	.+4      	; 0x7b28 <__vector_10+0xea>
    7b24:	84 e0       	ldi	r24, 0x04	; 4
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    7b26:	01 c0       	rjmp	.+2      	; 0x7b2a <__vector_10+0xec>
    7b28:	81 e0       	ldi	r24, 0x01	; 1
    7b2a:	8e bb       	out	0x1e, r24	; 30
    7b2c:	c2 d1       	rcall	.+900    	; 0x7eb2 <USB_Event_Stub>
    7b2e:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    7b32:	83 ff       	sbrs	r24, 3
    7b34:	21 c0       	rjmp	.+66     	; 0x7b78 <__vector_10+0x13a>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    7b36:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    7b3a:	83 ff       	sbrs	r24, 3
    7b3c:	1d c0       	rjmp	.+58     	; 0x7b78 <__vector_10+0x13a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    7b3e:	80 91 e1 00 	lds	r24, 0x00E1
    7b42:	87 7f       	andi	r24, 0xF7	; 247
    7b44:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    7b48:	82 e0       	ldi	r24, 0x02	; 2
    7b4a:	8e bb       	out	0x1e, r24	; 30
    7b4c:	10 92 c0 01 	sts	0x01C0, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    7b50:	80 91 e1 00 	lds	r24, 0x00E1
		USB_Device_ConfigurationNumber = 0;
    7b54:	8e 7f       	andi	r24, 0xFE	; 254
    7b56:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    7b5a:	80 91 e2 00 	lds	r24, 0x00E2
    7b5e:	8e 7f       	andi	r24, 0xFE	; 254
    7b60:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    7b64:	80 91 e2 00 	lds	r24, 0x00E2
    7b68:	80 61       	ori	r24, 0x10	; 16
    7b6a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    7b6e:	42 e0       	ldi	r20, 0x02	; 2
    7b70:	60 e0       	ldi	r22, 0x00	; 0
    7b72:	80 e0       	ldi	r24, 0x00	; 0
    7b74:	df de       	rcall	.-578    	; 0x7934 <Endpoint_ConfigureEndpoint_Prv>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    7b76:	9d d1       	rcall	.+826    	; 0x7eb2 <USB_Event_Stub>
    7b78:	ff 91       	pop	r31
    7b7a:	ef 91       	pop	r30
    7b7c:	bf 91       	pop	r27
    7b7e:	af 91       	pop	r26

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    7b80:	9f 91       	pop	r25
    7b82:	8f 91       	pop	r24
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    7b84:	7f 91       	pop	r23
    7b86:	6f 91       	pop	r22
    7b88:	5f 91       	pop	r21
    7b8a:	4f 91       	pop	r20
    7b8c:	3f 91       	pop	r19
    7b8e:	2f 91       	pop	r18
    7b90:	0f 90       	pop	r0
    7b92:	0f be       	out	0x3f, r0	; 63
    7b94:	0f 90       	pop	r0
    7b96:	1f 90       	pop	r1
    7b98:	18 95       	reti

00007b9a <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    7b9a:	20 91 c8 01 	lds	r18, 0x01C8
    7b9e:	30 91 c9 01 	lds	r19, 0x01C9
    7ba2:	26 17       	cp	r18, r22
    7ba4:	37 07       	cpc	r19, r23
    7ba6:	48 f0       	brcs	.+18     	; 0x7bba <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    7ba8:	61 15       	cp	r22, r1
    7baa:	71 05       	cpc	r23, r1
    7bac:	39 f4       	brne	.+14     	; 0x7bbc <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7bae:	20 91 e8 00 	lds	r18, 0x00E8
    7bb2:	2e 77       	andi	r18, 0x7E	; 126
    7bb4:	20 93 e8 00 	sts	0x00E8, r18
    7bb8:	01 c0       	rjmp	.+2      	; 0x7bbc <Endpoint_Write_Control_Stream_LE+0x22>
    7bba:	b9 01       	movw	r22, r18
    7bbc:	fc 01       	movw	r30, r24
    7bbe:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    7bc0:	61 15       	cp	r22, r1
    7bc2:	71 05       	cpc	r23, r1
    7bc4:	a1 f1       	breq	.+104    	; 0x7c2e <Endpoint_Write_Control_Stream_LE+0x94>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7bc6:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7bc8:	88 23       	and	r24, r24
    7bca:	e1 f1       	breq	.+120    	; 0x7c44 <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7bcc:	85 30       	cpi	r24, 0x05	; 5
    7bce:	e1 f1       	breq	.+120    	; 0x7c48 <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7bd0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    7bd4:	83 fd       	sbrc	r24, 3
    7bd6:	34 c0       	rjmp	.+104    	; 0x7c40 <Endpoint_Write_Control_Stream_LE+0xa6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7bd8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    7bdc:	82 ff       	sbrs	r24, 2
    7bde:	06 c0       	rjmp	.+12     	; 0x7bec <Endpoint_Write_Control_Stream_LE+0x52>
    7be0:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    7be4:	82 ff       	sbrs	r24, 2
    7be6:	26 c0       	rjmp	.+76     	; 0x7c34 <Endpoint_Write_Control_Stream_LE+0x9a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    7be8:	80 e0       	ldi	r24, 0x00	; 0
    7bea:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7bec:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    7bf0:	80 ff       	sbrs	r24, 0
    7bf2:	e6 cf       	rjmp	.-52     	; 0x7bc0 <Endpoint_Write_Control_Stream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    7bf4:	20 91 f3 00 	lds	r18, 0x00F3
    7bf8:	80 91 f2 00 	lds	r24, 0x00F2
    7bfc:	90 e0       	ldi	r25, 0x00	; 0
    7bfe:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    7c00:	61 15       	cp	r22, r1
    7c02:	71 05       	cpc	r23, r1
    7c04:	51 f0       	breq	.+20     	; 0x7c1a <Endpoint_Write_Control_Stream_LE+0x80>
    7c06:	88 30       	cpi	r24, 0x08	; 8
    7c08:	91 05       	cpc	r25, r1
    7c0a:	38 f4       	brcc	.+14     	; 0x7c1a <Endpoint_Write_Control_Stream_LE+0x80>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    7c0c:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7c0e:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    7c12:	61 50       	subi	r22, 0x01	; 1
    7c14:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    7c16:	01 96       	adiw	r24, 0x01	; 1
    7c18:	f3 cf       	rjmp	.-26     	; 0x7c00 <Endpoint_Write_Control_Stream_LE+0x66>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    7c1a:	21 e0       	ldi	r18, 0x01	; 1
    7c1c:	08 97       	sbiw	r24, 0x08	; 8
    7c1e:	09 f0       	breq	.+2      	; 0x7c22 <Endpoint_Write_Control_Stream_LE+0x88>
    7c20:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7c22:	80 91 e8 00 	lds	r24, 0x00E8
    7c26:	8e 77       	andi	r24, 0x7E	; 126
    7c28:	80 93 e8 00 	sts	0x00E8, r24
    7c2c:	c9 cf       	rjmp	.-110    	; 0x7bc0 <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    7c2e:	21 11       	cpse	r18, r1
    7c30:	ca cf       	rjmp	.-108    	; 0x7bc6 <Endpoint_Write_Control_Stream_LE+0x2c>
    7c32:	d6 cf       	rjmp	.-84     	; 0x7be0 <Endpoint_Write_Control_Stream_LE+0x46>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7c34:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7c36:	88 23       	and	r24, r24
    7c38:	29 f0       	breq	.+10     	; 0x7c44 <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7c3a:	85 30       	cpi	r24, 0x05	; 5
    7c3c:	89 f6       	brne	.-94     	; 0x7be0 <Endpoint_Write_Control_Stream_LE+0x46>
    7c3e:	04 c0       	rjmp	.+8      	; 0x7c48 <Endpoint_Write_Control_Stream_LE+0xae>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    7c40:	81 e0       	ldi	r24, 0x01	; 1
    7c42:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    7c44:	82 e0       	ldi	r24, 0x02	; 2
    7c46:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    7c48:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    7c4a:	08 95       	ret

00007c4c <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    7c4c:	61 15       	cp	r22, r1
    7c4e:	71 05       	cpc	r23, r1
    7c50:	29 f4       	brne	.+10     	; 0x7c5c <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7c52:	20 91 e8 00 	lds	r18, 0x00E8
    7c56:	2b 77       	andi	r18, 0x7B	; 123
    7c58:	20 93 e8 00 	sts	0x00E8, r18
	  Endpoint_ClearOUT();

	while (Length)
    7c5c:	61 15       	cp	r22, r1
    7c5e:	71 05       	cpc	r23, r1
    7c60:	31 f1       	breq	.+76     	; 0x7cae <Endpoint_Read_Control_Stream_LE+0x62>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7c62:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7c64:	22 23       	and	r18, r18
    7c66:	61 f1       	breq	.+88     	; 0x7cc0 <Endpoint_Read_Control_Stream_LE+0x74>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7c68:	25 30       	cpi	r18, 0x05	; 5
    7c6a:	61 f1       	breq	.+88     	; 0x7cc4 <Endpoint_Read_Control_Stream_LE+0x78>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7c6c:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    7c70:	23 fd       	sbrc	r18, 3
    7c72:	22 c0       	rjmp	.+68     	; 0x7cb8 <Endpoint_Read_Control_Stream_LE+0x6c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7c74:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    7c78:	22 ff       	sbrs	r18, 2
    7c7a:	f3 cf       	rjmp	.-26     	; 0x7c62 <Endpoint_Read_Control_Stream_LE+0x16>
    7c7c:	fc 01       	movw	r30, r24
    7c7e:	cf 01       	movw	r24, r30
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    7c80:	40 91 f3 00 	lds	r20, 0x00F3
    7c84:	20 91 f2 00 	lds	r18, 0x00F2
    7c88:	30 e0       	ldi	r19, 0x00	; 0
    7c8a:	34 2b       	or	r19, r20
		{
			while (Length && Endpoint_BytesInEndpoint())
    7c8c:	23 2b       	or	r18, r19
    7c8e:	09 f3       	breq	.-62     	; 0x7c52 <Endpoint_Read_Control_Stream_LE+0x6>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    7c90:	80 91 f1 00 	lds	r24, 0x00F1
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    7c94:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    7c96:	cf 01       	movw	r24, r30
				Length--;
    7c98:	61 50       	subi	r22, 0x01	; 1
    7c9a:	71 09       	sbc	r23, r1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    7c9c:	61 15       	cp	r22, r1
    7c9e:	71 05       	cpc	r23, r1
    7ca0:	71 f7       	brne	.-36     	; 0x7c7e <Endpoint_Read_Control_Stream_LE+0x32>
    7ca2:	d7 cf       	rjmp	.-82     	; 0x7c52 <Endpoint_Read_Control_Stream_LE+0x6>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7ca4:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7ca6:	88 23       	and	r24, r24
    7ca8:	59 f0       	breq	.+22     	; 0x7cc0 <Endpoint_Read_Control_Stream_LE+0x74>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7caa:	85 30       	cpi	r24, 0x05	; 5
    7cac:	59 f0       	breq	.+22     	; 0x7cc4 <Endpoint_Read_Control_Stream_LE+0x78>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7cae:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    7cb2:	80 ff       	sbrs	r24, 0
    7cb4:	f7 cf       	rjmp	.-18     	; 0x7ca4 <Endpoint_Read_Control_Stream_LE+0x58>
    7cb6:	02 c0       	rjmp	.+4      	; 0x7cbc <Endpoint_Read_Control_Stream_LE+0x70>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    7cb8:	81 e0       	ldi	r24, 0x01	; 1
    7cba:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    7cbc:	80 e0       	ldi	r24, 0x00	; 0
    7cbe:	08 95       	ret
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    7cc0:	82 e0       	ldi	r24, 0x02	; 2
    7cc2:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    7cc4:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    7cc6:	08 95       	ret

00007cc8 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    7cc8:	0f 93       	push	r16
    7cca:	1f 93       	push	r17
    7ccc:	cf 93       	push	r28
    7cce:	df 93       	push	r29
    7cd0:	00 d0       	rcall	.+0      	; 0x7cd2 <USB_Device_ProcessControlRequest+0xa>
    7cd2:	cd b7       	in	r28, 0x3d	; 61
    7cd4:	de b7       	in	r29, 0x3e	; 62
    7cd6:	e2 ec       	ldi	r30, 0xC2	; 194
    7cd8:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    7cda:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    7cde:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    7ce0:	81 e0       	ldi	r24, 0x01	; 1
    7ce2:	ea 3c       	cpi	r30, 0xCA	; 202
    7ce4:	f8 07       	cpc	r31, r24
    7ce6:	c9 f7       	brne	.-14     	; 0x7cda <USB_Device_ProcessControlRequest+0x12>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    7ce8:	1e db       	rcall	.-2500   	; 0x7326 <EVENT_USB_Device_ControlRequest>
    7cea:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7cee:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
    7cf0:	cb c0       	rjmp	.+406    	; 0x7e88 <USB_Device_ProcessControlRequest+0x1c0>
    7cf2:	20 91 c2 01 	lds	r18, 0x01C2
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    7cf6:	30 91 c3 01 	lds	r19, 0x01C3

		switch (USB_ControlRequest.bRequest)
    7cfa:	83 2f       	mov	r24, r19
    7cfc:	90 e0       	ldi	r25, 0x00	; 0
    7cfe:	8a 30       	cpi	r24, 0x0A	; 10
    7d00:	91 05       	cpc	r25, r1
    7d02:	08 f0       	brcs	.+2      	; 0x7d06 <USB_Device_ProcessControlRequest+0x3e>
    7d04:	c1 c0       	rjmp	.+386    	; 0x7e88 <USB_Device_ProcessControlRequest+0x1c0>
    7d06:	fc 01       	movw	r30, r24
    7d08:	e9 59       	subi	r30, 0x99	; 153
    7d0a:	f7 4c       	sbci	r31, 0xC7	; 199
    7d0c:	e4 c0       	rjmp	.+456    	; 0x7ed6 <__tablejump2__>
    7d0e:	22 38       	cpi	r18, 0x82	; 130
    7d10:	09 f0       	breq	.+2      	; 0x7d14 <USB_Device_ProcessControlRequest+0x4c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7d12:	ba c0       	rjmp	.+372    	; 0x7e88 <USB_Device_ProcessControlRequest+0x1c0>
    7d14:	80 91 c6 01 	lds	r24, 0x01C6
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    7d18:	87 70       	andi	r24, 0x07	; 7
    7d1a:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7d1e:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    7d22:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7d26:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7d2a:	87 7f       	andi	r24, 0xF7	; 247
    7d2c:	80 93 e8 00 	sts	0x00E8, r24
    7d30:	95 fb       	bst	r25, 5
    7d32:	88 27       	eor	r24, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    7d34:	80 f9       	bld	r24, 0
    7d36:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    7d3a:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
    7d3e:	82 c0       	rjmp	.+260    	; 0x7e44 <USB_Device_ProcessControlRequest+0x17c>
    7d40:	82 2f       	mov	r24, r18
    7d42:	8d 7f       	andi	r24, 0xFD	; 253
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7d44:	09 f0       	breq	.+2      	; 0x7d48 <USB_Device_ProcessControlRequest+0x80>
    7d46:	a0 c0       	rjmp	.+320    	; 0x7e88 <USB_Device_ProcessControlRequest+0x1c0>
    7d48:	22 30       	cpi	r18, 0x02	; 2
    7d4a:	09 f0       	breq	.+2      	; 0x7d4e <USB_Device_ProcessControlRequest+0x86>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    7d4c:	9d c0       	rjmp	.+314    	; 0x7e88 <USB_Device_ProcessControlRequest+0x1c0>
    7d4e:	80 91 c4 01 	lds	r24, 0x01C4

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    7d52:	81 11       	cpse	r24, r1
    7d54:	24 c0       	rjmp	.+72     	; 0x7d9e <USB_Device_ProcessControlRequest+0xd6>
    7d56:	20 91 c6 01 	lds	r18, 0x01C6
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    7d5a:	27 70       	andi	r18, 0x07	; 7
    7d5c:	09 f4       	brne	.+2      	; 0x7d60 <USB_Device_ProcessControlRequest+0x98>
    7d5e:	94 c0       	rjmp	.+296    	; 0x7e88 <USB_Device_ProcessControlRequest+0x1c0>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    7d60:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7d64:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    7d68:	80 ff       	sbrs	r24, 0
    7d6a:	19 c0       	rjmp	.+50     	; 0x7d9e <USB_Device_ProcessControlRequest+0xd6>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    7d6c:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7d70:	33 30       	cpi	r19, 0x03	; 3
    7d72:	11 f4       	brne	.+4      	; 0x7d78 <USB_Device_ProcessControlRequest+0xb0>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    7d74:	80 62       	ori	r24, 0x20	; 32
    7d76:	11 c0       	rjmp	.+34     	; 0x7d9a <USB_Device_ProcessControlRequest+0xd2>
    7d78:	80 61       	ori	r24, 0x10	; 16
    7d7a:	80 93 eb 00 	sts	0x00EB, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    7d7e:	81 e0       	ldi	r24, 0x01	; 1
    7d80:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    7d82:	02 2e       	mov	r0, r18
    7d84:	01 c0       	rjmp	.+2      	; 0x7d88 <USB_Device_ProcessControlRequest+0xc0>
    7d86:	88 0f       	add	r24, r24
    7d88:	0a 94       	dec	r0
    7d8a:	ea f7       	brpl	.-6      	; 0x7d86 <USB_Device_ProcessControlRequest+0xbe>
    7d8c:	80 93 ea 00 	sts	0x00EA, r24
    7d90:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
    7d94:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    7d98:	88 60       	ori	r24, 0x08	; 8
    7d9a:	80 93 eb 00 	sts	0x00EB, r24
    7d9e:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7da2:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7da6:	87 7f       	andi	r24, 0xF7	; 247
    7da8:	50 c0       	rjmp	.+160    	; 0x7e4a <USB_Device_ProcessControlRequest+0x182>
    7daa:	21 11       	cpse	r18, r1
    7dac:	6d c0       	rjmp	.+218    	; 0x7e88 <USB_Device_ProcessControlRequest+0x1c0>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7dae:	10 91 c4 01 	lds	r17, 0x01C4
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    7db2:	1f 77       	andi	r17, 0x7F	; 127
    7db4:	0f b7       	in	r16, 0x3f	; 63
    7db6:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    7db8:	80 91 e8 00 	lds	r24, 0x00E8
    7dbc:	87 7f       	andi	r24, 0xF7	; 247
    7dbe:	80 93 e8 00 	sts	0x00E8, r24
    7dc2:	cb dd       	rcall	.-1130   	; 0x795a <Endpoint_ClearStatusStage>
    7dc4:	80 91 e8 00 	lds	r24, 0x00E8
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    7dc8:	80 ff       	sbrs	r24, 0
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7dca:	fc cf       	rjmp	.-8      	; 0x7dc4 <USB_Device_ProcessControlRequest+0xfc>
    7dcc:	80 91 e3 00 	lds	r24, 0x00E3

	while (!(Endpoint_IsINReady()));
    7dd0:	80 78       	andi	r24, 0x80	; 128
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    7dd2:	81 2b       	or	r24, r17
    7dd4:	80 93 e3 00 	sts	0x00E3, r24
    7dd8:	80 68       	ori	r24, 0x80	; 128

				UDADDR = Temp;
    7dda:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
    7dde:	11 23       	and	r17, r17
    7de0:	11 f0       	breq	.+4      	; 0x7de6 <USB_Device_ProcessControlRequest+0x11e>
    7de2:	83 e0       	ldi	r24, 0x03	; 3

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    7de4:	01 c0       	rjmp	.+2      	; 0x7de8 <USB_Device_ProcessControlRequest+0x120>
    7de6:	82 e0       	ldi	r24, 0x02	; 2
    7de8:	8e bb       	out	0x1e, r24	; 30
    7dea:	0f bf       	out	0x3f, r16	; 63
    7dec:	4d c0       	rjmp	.+154    	; 0x7e88 <USB_Device_ProcessControlRequest+0x1c0>
    7dee:	20 58       	subi	r18, 0x80	; 128
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    7df0:	22 30       	cpi	r18, 0x02	; 2
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
    7df2:	08 f0       	brcs	.+2      	; 0x7df6 <USB_Device_ProcessControlRequest+0x12e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7df4:	49 c0       	rjmp	.+146    	; 0x7e88 <USB_Device_ProcessControlRequest+0x1c0>
    7df6:	ae 01       	movw	r20, r28
    7df8:	4f 5f       	subi	r20, 0xFF	; 255
    7dfa:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    7dfc:	60 91 c6 01 	lds	r22, 0x01C6
    7e00:	80 91 c4 01 	lds	r24, 0x01C4
    7e04:	90 91 c5 01 	lds	r25, 0x01C5
    7e08:	62 dd       	rcall	.-1340   	; 0x78ce <CALLBACK_USB_GetDescriptor>
    7e0a:	00 97       	sbiw	r24, 0x00	; 0
    7e0c:	09 f4       	brne	.+2      	; 0x7e10 <USB_Device_ProcessControlRequest+0x148>
    7e0e:	3c c0       	rjmp	.+120    	; 0x7e88 <USB_Device_ProcessControlRequest+0x1c0>
    7e10:	20 91 e8 00 	lds	r18, 0x00E8
    7e14:	27 7f       	andi	r18, 0xF7	; 247
    7e16:	20 93 e8 00 	sts	0x00E8, r18
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7e1a:	bc 01       	movw	r22, r24
    7e1c:	89 81       	ldd	r24, Y+1	; 0x01
    7e1e:	9a 81       	ldd	r25, Y+2	; 0x02
    7e20:	bc de       	rcall	.-648    	; 0x7b9a <Endpoint_Write_Control_Stream_LE>
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    7e22:	80 91 e8 00 	lds	r24, 0x00E8
    7e26:	8b 77       	andi	r24, 0x7B	; 123
    7e28:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7e2c:	2d c0       	rjmp	.+90     	; 0x7e88 <USB_Device_ProcessControlRequest+0x1c0>
    7e2e:	20 38       	cpi	r18, 0x80	; 128
    7e30:	59 f5       	brne	.+86     	; 0x7e88 <USB_Device_ProcessControlRequest+0x1c0>
    7e32:	80 91 e8 00 	lds	r24, 0x00E8
    7e36:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    7e38:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7e3c:	80 91 c0 01 	lds	r24, 0x01C0
    7e40:	80 93 f1 00 	sts	0x00F1, r24
    7e44:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    7e48:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7e4a:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7e4e:	85 dd       	rcall	.-1270   	; 0x795a <Endpoint_ClearStatusStage>
    7e50:	1b c0       	rjmp	.+54     	; 0x7e88 <USB_Device_ProcessControlRequest+0x1c0>
    7e52:	21 11       	cpse	r18, r1
    7e54:	19 c0       	rjmp	.+50     	; 0x7e88 <USB_Device_ProcessControlRequest+0x1c0>
    7e56:	90 91 c4 01 	lds	r25, 0x01C4
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    7e5a:	92 30       	cpi	r25, 0x02	; 2
    7e5c:	a8 f4       	brcc	.+42     	; 0x7e88 <USB_Device_ProcessControlRequest+0x1c0>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7e5e:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    7e62:	87 7f       	andi	r24, 0xF7	; 247
    7e64:	80 93 e8 00 	sts	0x00E8, r24
    7e68:	90 93 c0 01 	sts	0x01C0, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7e6c:	76 dd       	rcall	.-1300   	; 0x795a <Endpoint_ClearStatusStage>
    7e6e:	80 91 c0 01 	lds	r24, 0x01C0
    7e72:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    7e74:	04 c0       	rjmp	.+8      	; 0x7e7e <USB_Device_ProcessControlRequest+0x1b6>
    7e76:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
    7e7a:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
    7e7c:	02 c0       	rjmp	.+4      	; 0x7e82 <USB_Device_ProcessControlRequest+0x1ba>
    7e7e:	84 e0       	ldi	r24, 0x04	; 4
    7e80:	01 c0       	rjmp	.+2      	; 0x7e84 <USB_Device_ProcessControlRequest+0x1bc>
    7e82:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7e84:	8e bb       	out	0x1e, r24	; 30
    7e86:	43 da       	rcall	.-2938   	; 0x730e <EVENT_USB_Device_ConfigurationChanged>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    7e88:	80 91 e8 00 	lds	r24, 0x00E8
    7e8c:	83 ff       	sbrs	r24, 3
    7e8e:	0a c0       	rjmp	.+20     	; 0x7ea4 <USB_Device_ProcessControlRequest+0x1dc>
    7e90:	80 91 eb 00 	lds	r24, 0x00EB

	EVENT_USB_Device_ConfigurationChanged();
    7e94:	80 62       	ori	r24, 0x20	; 32
    7e96:	80 93 eb 00 	sts	0x00EB, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7e9a:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    7e9e:	87 7f       	andi	r24, 0xF7	; 247
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7ea0:	80 93 e8 00 	sts	0x00E8, r24
    7ea4:	0f 90       	pop	r0
    7ea6:	0f 90       	pop	r0
    7ea8:	df 91       	pop	r29
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7eaa:	cf 91       	pop	r28
    7eac:	1f 91       	pop	r17
    7eae:	0f 91       	pop	r16
    7eb0:	08 95       	ret

00007eb2 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    7eb2:	08 95       	ret

00007eb4 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    7eb4:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    7eb6:	8e b3       	in	r24, 0x1e	; 30
    7eb8:	88 23       	and	r24, r24
    7eba:	59 f0       	breq	.+22     	; 0x7ed2 <USB_USBTask+0x1e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    7ebc:	c0 91 e9 00 	lds	r28, 0x00E9
    7ec0:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7ec2:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7ec6:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    7eca:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
    7ecc:	fd de       	rcall	.-518    	; 0x7cc8 <USB_Device_ProcessControlRequest>
    7ece:	c0 93 e9 00 	sts	0x00E9, r28
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7ed2:	cf 91       	pop	r28
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    7ed4:	08 95       	ret

00007ed6 <__tablejump2__>:
    7ed6:	ee 0f       	add	r30, r30
    7ed8:	ff 1f       	adc	r31, r31

00007eda <__tablejump__>:
    7eda:	05 90       	lpm	r0, Z+
    7edc:	f4 91       	lpm	r31, Z
    7ede:	e0 2d       	mov	r30, r0
    7ee0:	09 94       	ijmp

00007ee2 <__eerd_byte_m32u4>:
    7ee2:	f9 99       	sbic	0x1f, 1	; 31
    7ee4:	fe cf       	rjmp	.-4      	; 0x7ee2 <__eerd_byte_m32u4>
    7ee6:	92 bd       	out	0x22, r25	; 34
    7ee8:	81 bd       	out	0x21, r24	; 33
    7eea:	f8 9a       	sbi	0x1f, 0	; 31
    7eec:	99 27       	eor	r25, r25
    7eee:	80 b5       	in	r24, 0x20	; 32
    7ef0:	08 95       	ret

00007ef2 <__eewr_byte_m32u4>:
    7ef2:	26 2f       	mov	r18, r22

00007ef4 <__eewr_r18_m32u4>:
    7ef4:	f9 99       	sbic	0x1f, 1	; 31
    7ef6:	fe cf       	rjmp	.-4      	; 0x7ef4 <__eewr_r18_m32u4>
    7ef8:	1f ba       	out	0x1f, r1	; 31
    7efa:	92 bd       	out	0x22, r25	; 34
    7efc:	81 bd       	out	0x21, r24	; 33
    7efe:	20 bd       	out	0x20, r18	; 32
    7f00:	0f b6       	in	r0, 0x3f	; 63
    7f02:	f8 94       	cli
    7f04:	fa 9a       	sbi	0x1f, 2	; 31
    7f06:	f9 9a       	sbi	0x1f, 1	; 31
    7f08:	0f be       	out	0x3f, r0	; 63
    7f0a:	01 96       	adiw	r24, 0x01	; 1
    7f0c:	08 95       	ret

00007f0e <_exit>:
    7f0e:	f8 94       	cli

00007f10 <__stop_program>:
    7f10:	ff cf       	rjmp	.-2      	; 0x7f10 <__stop_program>
